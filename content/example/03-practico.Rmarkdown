---
title: "Transformar y seleccionar variables"
linktitle: "3: Transformar y seleccionar variables"
date: "2021-08-20"
menu:
  example:
    parent: Ejemplos
    weight: 4
type: docs
toc: true
editor_options: 
  chunk_output_type: console
---

## 0. Objetivo de la práctica

El objetivo del práctico, es avanzar en el procesamiento de los datos a través de la transformación de las variables a utilizar. Para ello revisaremos procedimientos básicos para el manejo de datos con Rstudio.


## 1. Recursos de la práctica

En este práctico utilizaremos la base de datos de la [**Encuesta de Caracterización Socioeconómica (CASEN)**](http://observatorio.ministeriodesarrollosocial.gob.cl/encuesta-casen-en-pandemia-2020), la cual fue procesada en el [Práctico anterior]().Recuerden siempre consultar el [**manual/libro de códigos**](http://observatorio.ministeriodesarrollosocial.gob.cl/storage/docs/casen/2020/Libro_de_codigos_Base_de_Datos_Casen_en_Pandemia_2020.pdf) antes de trabajar una base de datos.


## 2. Librerias a utilizar

En este práctico utilizaremos cuatro paquetes

1. `pacman`: este facilita y agiliza la lectura de los paquetes a utilizar en R

2. `sjmisc`: explorar datos

3. `car()`: recodificar manteniendo las etiquetas

4. `tidyverse`: colección de paquetes, del cuál utilizaremos `dplyr`  `forcast`

5. `magrittr`: nos permitirá ocupar dos operadores que en R son **muy** utilizados


# Pasos del procesamiento

## 1. Cargar librerías

Primero instalamos `pacman` por única vez

```{r eval=FALSE, include=TRUE}
install.packages("pacman")
library (pacman)
```

Luego cargaremos así los paquetes. Les recordamos que cuando luego de un paquete ponemos `::` esto se refiere a que se *"fuerza"* que esa función provenga de *ese paquete*

```{r, include=TRUE}
pacman::p_load(tidyverse,
               magrittr,
               car,
               sjmisc)
```


## 2. Cargar base de datos

```{r include=FALSE, warning= FALSE , message = F}
temp <- tempfile()
download.file("http://observatorio.ministeriodesarrollosocial.gob.cl/storage/docs/casen/2020/Casen_en_Pandemia_2020_STATA.dta.zip",temp)
datos <- haven::read_dta(unz(temp, "Casen en Pandemia 2020 STATA.dta"))
unlink(temp); remove(temp)
```

```{r eval=FALSE, include=TRUE}
datos <- read_dta("../Rproject/input/Casen en Pandemia 2020 STATA.dta") 
```

En el panel **Environment**, visualizamos el nuevo objeto, que posee `r format( nrow(datos), decimal.mark="," , big.mark = ".")` observaciones (o filas), y `r format(ncol(datos), decimal.mark="," , big.mark = ".")` variables (columnas)

Recordemos que también podemos explorar la base de datos con las siguientes funciones.

```{r eval=FALSE, include=TRUE}
# De paquete base
dim(datos) # nos entrega las dimensiones, es decir el numero de observaciones y el número de variables
View(datos) # se usa para visualizar la base de datos
names(datos) # entrega los nombres de las variables que componen el dataset
head(datos) # muestra las primeras filas presentes en el marco de datos

# De sjmisc

find_var(datos, "concepto") # se utiliza para encontrar variables

```

## 4. Un aspecto clave antes de comenzar: los operadores


Previo a trabajar con la base de datos, debemos repasemos el concepto de **operadores**. Estos símbolos no son de uso exclusivo en R ¡probablemente los conoces desde tus cursos de matemática! Ahora bien, no todos tienen el mismo significado que en otros softwares.

Los **operadores** serán símbolos que permitirán, en los distintos procedimientos de procesamiento, simplificar procesos. Por ejemplo, serán útilizados cuando filtremos nuestros datos para personas de ciertas categorías, cuando calculemos variables nuevas (de manera aritmética o condicional) o, simplemente, cuando queramos hacer procesos "concatenados".


#### Operadores relacionales 

Se usan para hacer comparaciones. Cuando en la *Tabla 1* nos referimos a `un valor`, esto refiere tambien a `variables`

| Símbolo  | Función |
|---------:|:--------|
| `<`      |  Un valor es menor que otro |
| `>`      |  Un valor es mayor que otro |
| `==`     |  Un valor es igual que otro [^1] |
| `<=`     |  Un valor es menor o igual que otro |
| `>=`     |  Un valor es mayor o igual que otro |
| `!=`     |  Un valor es distinto o diferente que otro|
| `%in%`   |  Un valor pertenece al conjunto designado [^2] |
| `is.na()`|  El valor es perdido o `NA` |
| `!is.na()`| El valor es distinto de  `NA` |

[^1]: ¡Atención! Fíjate bien que `==` y `=` son distintos. En R `==` es indicar *"igual a"*, mientras que  `=` es *asignar* (sinónimo de `<-`)

[^2]: Este operador es **muy utilizado**, sirve para indicar que algo está dentro de una cadena de valores. 

#### Operadores aritméticos

Realizan operaciones, como la suma, resta, división, entre otros.

| Símbolo  | Función |
|---------:|:--------|
| `+`      |  Suma |
| `-`      |  Resta|
| `*`     |  Multiplicación |
| `/`     |  División |
| `^`     |  Elevado |

#### Operadores de asignación

Hay dos formas de asignar `objetoA <- objetoB` o `objetoA = objetoB`. Ambas implican que lo que se este realizando en el *objetoB* implica que eso va a producir o generar al *objetoA*

#### Operadores booleanos

Describen relaciones **lógicas** o **condicionales**

| Símbolo  | Función |
|---------:|:--------|
| `&`      |  Indica un *y* lógico |
| `|`      |  Indica un *o* lógico |
| `xor()`  |  Excluye la condición  |
| `!`      |  Distinto de ... |
| `any`    |  Ninguna de las condiciones serán utilizadas |
| `all`    |  Todas las condiciones serán ocupadas |



![](https://github.com/learn-R/slides/raw/main/img/02/01operad.png)

Figura 1: Resumen de operadores

### Operador pipeline %>% 

¡Aquí mucha atención! Este operador `%>%` (llamado `pipe`) no es un operador que este contenido en las funciones base del lenguaje R. Este operador proviene de la función `magrittr` de `tidyverse`, y es de los operadores más útiles y utilizados en R.

¿Para qué sirve? Para concatenar múltiples funciones y procesos. *Imagina que quieres filtrar una base de datos a partir de tramos etarios. Pero no tienes esa variable creada. ¿Que hacer? La respuesta: concatenar el proceso de creación de variables y luego filtrar.* Eso se puede hacer gracias a ` %>% ` (ya mostraremos como utilizar esta herramienta), que por lo demás es muy fácil de ejecutar.

- `Ctrl + shift + M` Para Windows
- `⌘ + shift + M` Para Mac


## 5. Transformación y selección de variables con `dplyr()`

`dplyr()`es un paquete de `tidyverse` que proporciona una base para la manipulación de datos, principalmente a partir de funciones que permiten operar las columnas (o variables)

### 5.1 `select()` para manipular variables

Para **seleccionar variables** ocuparemos `select()`. Existen diversos enfoques para realizarlo. Primero, debemos conocer su estructura

Si queremos incluir las variables `variable1`, `variable2` y `variable3`
{{< div "note" >}}
select(datos, variable1, variable2, variable3)
{{< /div >}}

Si queremos excluir anteponemos un menos `-variable1`
{{< div "note" >}}
select(datos, -variable1)
{{< /div >}}


#### `select()` por indexación

La indexación refiere al orden que tiene la columna o variable dentro de los datos. Imaginemos que queremos seleccionar:

```{r}
select(datos, 1, 2) # la primera y la segunda columna

select(datos, 1:4) # la primera hasta la cuarta columna

select(datos, c(1,4)) # la primera y la cuarta columna
```

#### `select()` por nombre de columna

Si conocemos el nombre de la variable simplemente lo podemos poner y se seleccionará.

```{r}
select(datos, edad, sexo, o1)
```

También puedo renombrar en el mismo proceso de selección indicando `nuevo_nombre = nombre_original` en el proceso de selección

```{r}
select(datos, edad, sexo, ocupacion = o1)
```

#### `select()` para reordenar variables

Podemos seleccionar variables y luego indicar que queremos todo el resto de las variables (`everythin()`). Solo por una cosa de orden. Esto será útil sobre todo cuando tengamos identificadores

```{r}
select(datos, id_persona, sexo, edad, everything())
```

#### `select()` con patrones de texto

Podemos seleccionar variables considerando los prefijos, sufijos o partes de *cómo están nombradas las variables*. Independiente de qué tipo de patrón estes buscando, como todo texto y expresión regular en R (y gran parte de los carácteres) este texto debe venir entre **comillas**. Algunas de las funciones que posibilitan este proceso son:

- `starts_with()`: prefijo 
- `ends_with() `:  sufijo
- `contains()` : contiene una cadena de texto literal
- `matches()` : coincide con una expresión regular

```{r}
select(datos, starts_with("a"), ends_with("preg"))

# También se pueden combinar con operadores logicos

select(datos, starts_with("y1")&ends_with("preg")) 
select(datos, contains("pobre")|contains("vivienda"))
select(datos, matches("pobreza_|vivienda"))
```


#### `select()` y condiciones lógicas

Si combinamos `select()` con `where()` obtendremos algo así como una frase *"seleciona donde"*, ese *donde* responde a una condición que cumple cierta variable. Por ejemplo, queremos seleccionar todas las variables que son carácteres (`is.character`):

```{r}
select(datos, where(is.character))
```

Luego de la revisión del libro de códigos y la exploración de datos mediante a funciones como `find_var()` de `sjmisc` decidimos trabajar con las siguientes variables.

- `edad`
- `sexo`
- `s13`: previsión de salud
- `tot_per`: número de personas en el hogar
- `ytoth`: ingresos totales del hogar
- `o1`: ocupación
- `y26d_total`: Monto del IFE
- `y26d_hog`: ¿Alguien recibió el IFE?

¡Apliquémos conocimientos!

```{r}
select(datos, edad, sexo, prev =592, ocupacion = o1, tot_per, ytoth, starts_with("y26d_")&matches("total|hog"))
```

Es una buena práctica trabajar solo con las columnas que utilizaremos para el análisis, principalmente pues disminuye el *uso de memoria*

```{r}
datos_proc <- select(datos, edad, sexo, prev = 592, ocupacion = o1, tot_per, ytoth, starts_with("y26d_")&matches("total|hog"))
```

El nuevo objeto posee`r format(ncol(datos), decimal.mark="," , big.mark = ".")` variables (columnas), pero conserva las filas `r format( nrow(datos), decimal.mark="," , big.mark = ".")` (u observaciones) ¿Qué pasa si quiero trabajar con un *subset* de casos? La respuesta es `filter()`

### 5.2 `filter()` para manipular observaciones

La función `filter()` de `dplyr` escoge o extrae filas basados en sus valores, subdivide un data frame (*subset*), reteniendo todas las filas que satisfacen sus condiciones.

Con `filter()` será esencial el uso de los **operadores** que ya vimos, dado que las observaciones que preservarán en nuestros datos (y aquellas que no), están definidas por condiciones lógicas (relacionales o booleanas)

{{< div "note" >}}
filter(datos, condicion_para filtrar)
Esta condición para filtrar podría ser, por ejemplo
variable1 >= 3
{{< /div >}}

#### `filter` con números

Imaginémos que queremos una base con las personas mayores de 15 años. Pero también que pertenezcan a hogares con menos de 7 personas. 
```{r}
filter(datos_proc, edad >= 15)
filter(datos_proc, edad >= 15 & tot_per <7)
```

¿Y si quiero filtrar para saber el valor máximo de ingresos (`ytoth`)?

```{r}
filter(datos_proc, ytoth == max(ytoth))
```

¡Gana \$225.200.000, es Hombre y tiene 41 años! (y vive solo...)


#### `filter()` con carácteres

Si queremos filtrar por la variable `sexo` solo a las mujeres, tengo dos opciones: o solo selecciono a las mujeres (`==`) o excluyo a los hombres (`!=`).

Ahora bien, antes hay que hacer una precisión importante: en los datos `sexo` es una variable que está como `dbl` y `lbl` (número etiquetado), por lo que no es que en la base aparezcan "Mujeres" y "Hombres", sino que 2 y 1.

Por ello, con el siguiente código aparecerá un error en sus consolas. 
```{r, eval = F}
filter(datos_proc, sexo == "Mujer")
```

Una función **muy muy útil** (sobre todo cuando trabajemos con regresiones) es `as_factor()` que permite conservar los niveles pero definiendo sus categorías de respuesta en base a la etiqueta que traen (el `lbl`)

```{r}
datos_proc$sexo <- as_factor(datos_proc$sexo)
```

¡Ahora si funcionará!
```{r}
filter(datos_proc, sexo == "Mujer")
filter(datos_proc, sexo != "Hombre")
```

{{< div "note" >}}
**Ojo**. R es *sensible* a cómo está escrito el texto. Si pones el mismo código pero sin respetar mayúsuculas y minúsculas el código no funcionará
{{< /div >}}

¡Por último! ¿Cómo se seleccionan dos condiciones en carácter? Con el operador `%in%`

```{r}
datos_proc$prev <- as_factor(datos_proc$prev)

filter(datos_proc, prev %in% c("Sistema Público FONASA", "ISAPRE"))
```

Antes de definir que observaciones vamos a conservar en una base procesada `datos_proc` ¡Creemos transformemos variables con `mutate()`!

### 5.3 `mutate()` para transformación de  variables

La función de `mutate()` permite hacer operaciones para crear nuevas variables o transformar las ya existentes. 

{{< div "note" >}}
mutate(datos, nueva_variable = cálculo o condición)
{{< /div >}}

#### `mutate()` en base a cálculo

Calcularemos una nueva variable llamada `nueva_variable` que proviene de la suma de 2+3. También una variable `ingreso_percapita` que proviene de la división del ingreso total del hogar y el número de personas que residen en el hogar 

```{r echo=TRUE}
mutate(datos_proc, nueva_variable = 3+2)
mutate(datos_proc, nueva_variable = 3+2,
       ingreso_percapita = ytoth/tot_per)
```

¿Qué pasa si queremos, luego de calcular nuestras nuevas variables, filtrar un ingreso per cápita menor o igual a $1.000.000

**¡Ahora entra en escena nuestro operador estrella ` %>% `!**

{{< div "note" >}}
datos %>% 
  mutate(., nueva_variable = calculo ) %>% 
  filter(., nueva_variable <= valor)
{{< /div >}}

Básicamente, el ` %>% ` permite "ingresar" nuestra base de datos como argumento para cada función e ir operándola en proceso

```{r}
datos_proc %>%
  mutate(ingreso_percapita = ytoth/tot_per) %>% 
  filter(ingreso_percapita <= 1000000)
```

#### `recode()`

La función denominada *recode* puede reemplazar valores numéricos en base a su posición o su nombre, y valores de carácteres o factores sólo por su nombre. 

En el siguiente ejemplo recodificamos las categorías de respuesta de Mujer a Femenino y de Hombre a Masculino

```{r}
datos_proc %>% 
  mutate(sexo = dplyr::recode(sexo, "Mujer" = "Femenino", "Hombre" = "Masculino"))
```

El problema de `recode()` que se utiliza dentro de `dplyr` es que si recodifico se pierde la etiqueta anterior. Esto es un problema a si por ejemplo, solo quiero recodificar casos perdidos. 

Frente a ello, con el tiempo nos hemos convencido de que la mejor solución hasta ahora es ocupar `recode()` del paquete `car`. Si recuerdan, dos funciones con el mismo nombre podrían producir *conflictos*, y por ello, especificaremos con `car::recode()` que la función `recode()` que ocupamos proviene de `car`

{{< div "note" >}}
datos %$% 
 car::recode(.$variable, c('valor_orig1=nuevo_valor1;valor_org2=nuevo_valor2'))
 
*Ojo: %$% es el primo hermano de %>% (básicamente funcionan igual, pero este es necesario para car)*
{{< /div >}}

```{r}
datos_proc %$% 
  car::recode(.$y26d_hog, c('9=NA')) %>% head(.)
```

Aquí una versión de si la recodificación es hacia carácteres (mismo ejemplo que con `recode()` de `dplyr`)

```{r}
datos_proc %$% 
  car::recode(.$sexo, c('"Mujer"="Femenino";"Hombre"= "Masculino"'), as.factor = T) %>% head(.)
```


### 5.3.2 `if_else()` para construir variables condicionales

La función `if_else()` permite construir variables en base a condiciones lógicas. Su estructura es la siguiente

{{< div "note" >}}
if_else(condición,TRUE,FALSE)
Donde dice `TRUE` es el valor que se obtiene si la condición es verdadera, mientras que `FALSE` es todo el resto de las opciones (o cuando es FALSA)
{{< /div >}}

Crearemos una variable que *dummy* que indica si el respondente es *FONASA* o no lo es. 

```{r eval=FALSE, include=TRUE}
datos_proc %>% 
 		 mutate(fonasa = if_else(prev == "Sistema Público FONASA", 1, 0))
```

También podemos ocupar esta función como validador, por ejemplo, rellenando con valores lógicos como `FALSE` cuando no hay valores en `ytoth`. Luego esos `FALSE` podrían ser contados en otros procesos estadísticos

```{r echo=TRUE}
datos_proc %>% 
  mutate(validador_ingreso = if_else(is.na(ytoth), FALSE, TRUE))
```

### 5.3.2 `case_when()` para construir variable en base a múltiples condiciones

Una función que se utiliza frecuentemente para *colapsar* categorías o construir categorías en base a varias condiciones es `case_when()` por lo lógico y *fácil* que es de entender

{{< div "note" >}}
case_when(variable == condicion ~ valor1,
          variable == condicion ~ valor2,
          TRUE ~ NA_real)
- Donde, TRUE indica "todo el resto", y el NA dependerá de la clase del valor de recodificación
{{< /div >}}

Un ejemplo claro es cuando queremos construir *categorías de edad*

```{r}
datos_proc %>% 
  mutate(edad_tramo = case_when(edad <=39 ~  "Joven",
                                edad > 39 & edad <=59 ~ "Adulto",
                                edad > 59 ~ "Adulto mayor",
                                TRUE ~ NA_character_)) %>% 
  select(edad, edad_tramo)
```

Como se puede ver, no solamente indicamos tramos de la variable edad, sino que utilizamos operadores lógicos (`&`). Podríamos ocupar el que necesitemos, y sobre todo, también combinar variables (por ejemplo, crear una variable `sexo-edad`)

## 6. Resumen con procesamiento de las variables

Hasta ahora, solo hemos creado una base de datos que selecciona variables. Ahora nos resta incorporar en un nuevo objeto los cambios que nos parezcan relevantes para la base de datos procesada que utilizaremos en nuestros análisis. 

Como ya conocemos operadores que permiten concatenar procesos ( `%>%`  y `%$%`) este procedimiento será mucho más fácil. 

```{r}
datos_proc %>% 
 filter(edad >= 15 & tot_per <7) %>%
    mutate(ingreso_percapita = ytoth/tot_per,
           edad_tramo = case_when(edad <=39 ~  "Joven",
                                edad > 39 & edad <=59 ~ "Adulto",
                                edad > 59 ~ "Adulto mayor",
                                TRUE ~ NA_character_),
           fonasa = if_else(prev == "Sistema Público FONASA", 1, 0),
           ocupacion = as_factor(ocupacion)) %>%
  select(sexo, edad_tramo, ocupacion, ingreso_percapita, ife = y26d_hog)
```

¡Ahora que estamos seguras/os sobre-escribimos la base!
```{r}
datos_proc <- datos_proc %>% 
 filter(edad >= 15 & tot_per <7) %>%
    mutate(ingreso_percapita = ytoth/tot_per,
           edad_tramo = case_when(edad <=39 ~  "Joven",
                                edad > 39 & edad <=59 ~ "Adulto",
                                edad > 59 ~ "Adulto mayor",
                                TRUE ~ NA_character_),
           fonasa = if_else(prev == "Sistema Público FONASA", 1, 0),
           ocupacion = as_factor(ocupacion)) %>%
  select(sexo, edad_tramo, ocupacion, ingreso_percapita, ife = y26d_hog)
```

Podemos visualizar la base resultante a partir de `view_df()` de `sjPlot`
```{r, message= F, error= F, cache.comments= F}
sjPlot::view_df(datos_proc)
```

## 7. Guardar base procesada

Para guardar la base de datos procesada, debes dirigir la ruta hacia tu Rproject

```{r eval=FALSE, include=TRUE}
saveRDS(datos_proc, file = "../nombre_project/output/datos_proc.rds")
```

## 8. Reporte de progreso
  
¡Recuerda rellenar tu [reporte de progreso](https://learn-r.formr.org/). En tu correo electrónico está disponible el código mediante al cuál debes acceder para actualizar tu estado de avance del curso.

