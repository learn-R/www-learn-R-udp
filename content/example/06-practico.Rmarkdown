---
title: "Regresiones logísticas"
linktitle: "6: Regresiones logisticas"
date: "2021-08-27"
menu:
  example:
    parent: Ejemplos
    weight: 4
type: docs
toc: true
editor_options: 
  chunk_output_type: console
---


```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```


## 0. Objetivos del práctico

Este práctico tiene por objetivo presentar cómo crear modelos de regresión logística en R, con predictores categóricos y cuantitativos; cómo exponenciar los coeficientes para facilitar su interpretación; y, por último, herramientas de visualización de los modelos generados. 

## 1. Recursos del práctico

Este práctico fue elaborado con datos de la [**Encuesta Suplementaria de Ingresos (ESI)**](https://www.ine.cl/estadisticas/sociales/ingresos-y-gastos/encuesta-suplementaria-de-ingresos) en su versión 2020. Cuando trabajen con algún set de datos, nunca olviden revisar la documentación metodológica anexa, así como el [libro de códigos](https://www.ine.cl/docs/default-source/encuesta-suplementaria-de-ingresos/bbdd/manual-y-guía-de-variables/2020/personas-esi-2020.pdf?sfvrsn=f196cb4e_4) correspondiente. 

- [<i class="fas fa-file-archive"></i> `06-bloque.zip`](https://github.com/learn-R/09-class/raw/main/05-bloque.zip)


## 2. Librerías a utilizar

En este práctico utilizaremos seis paquetes

1. `pacman`: este facilita y agiliza la lectura de los paquetes a utilizar en R

2. `sjmisc`: explorar datos

3. `tidyverse`: colección de paquetes, del cuál utilizaremos `dplyr` y `haven`

4. `haven`: para transformar variables

5. `dplyr`: nos permite seleccionar variables de un set de datos

6. `sjPlot`: para construir tablas y gráficos

# Pasos del procesamiento

## 1. Cargar librerías

Como en las prácticas anteriores, empleamos la función `p_load` de la librería `pacman` 

```{r packages, include=TRUE}
pacman::p_load(sjmisc,
               tidyverse,
               haven,
               dplyr,
               sjPlot)
```

## 2. Cargar datos

Como se señaló anteriormente, en este práctico se trabajará con los datos de la **Encuesta Suplementaria de Ingresos (ESI)** en su versión 2020. Esta se encuentra en la carpeta "input/data", en formato .rds, habiendo sido procesada anteriormente. Por ello, empleamos la función `readRDS()` de la librería `base` de R.

```{r, echo = F }
datos <- readRDS(url("https://github.com/learn-R/09-class/raw/main/output/data/datos_proc.rds"))

```

Podemos darnos cuenta de que el set de datos presenta 71.935 observaciones (o filas), y 4 variables (o columnas), que incluyen a las variables `ingresos`, `educacion`, `sexo` y `edad`.

## 3. Explorar datos

A continuación, usaremos la función `view_df()` del paquete `sjPlot`, que presenta un resumen de las variables contenidas en el set de datos, que nos permitirá identificar la _etiqueta_ de cada variable y de cada una de sus alternativas de respuesta. 

```{r view-df, message=FALSE}
sjPlot::view_df(datos,
                encoding = 'UTF-8')
```

Podemos ver que tenemos dos variables cuantitativas (`ingresos` y `edad`), y dos variables categóricas (`sexo` y `educacion`). Estas últimas tienen 2 y 10 categorías, respectivamente. Sin embargo, en el caso de educacion, el valor `999` indica _Nivel ignorado_, es decir, valores nulos. En consideración de ello, ahora toca recodificar las variables y establecer los datatypes adecuados para poder generar el modelo de forma correcta. 

## 4. Transformación de variables

Primero, debemos cerciorarnos de que el nivel de medición corresponda con el datatype de cada columna. Para ello, emplearemos el comando `class()` del paquete `base` de R.

```{r class, include=F}
class(datos$ingresos)
class(datos$educacion)
class(datos$sexo)
class(datos$edad)
```

Las variables `ingresos` y `edad` presentan un `class()` de tipo `numeric`, por lo cual no es necesario realizar modificaciones. Sin embargo, las variables `educacion` y `sexo` deben ser transformadas en `factor` para trabajar con ellas de manera adecuada. Para ello, empleamos la función `as_factor()` del paquete `haven`. Una de las ventajas de esta función es que nos permite **mantener las etiquetas** de nuestras variables.

```{r factor, include=F}
datos$educacion <- as_factor(datos$educacion)
class(datos$educacion)
datos$sexo <- as_factor(datos$sexo)
class(datos$sexo)
```

## 5. Recodificaciones

La variable `educacion` presenta la categoría de respuesta `Nivel ignorado`, que realmente presenta casos perdidos. Para ello, usaremos la función `recode()` de la librería `car`, para transformar tales valores en `NA`. Asimismo, se unificarán las categorías `Educación primaria (nivel 1)` y `Educación primaria (nivel 2)`; y renombraremos `Educación técnica (Educación superior no universitaria)` como `Educación técnica` para facilitar el análisis. También nos damos cuenta de que las niveles (`levels`) de la variable no están ordenados de menor a mayor nivel educacional, por lo cual utilizaremos el argumento `levels` de la función `as.factor` del paquete `base` de R, para ordenarlos de forma adecuada. 

```{r recode}
datos$educacion <- car::recode(datos$educacion, recodes = c("'Nivel ignorado' = NA; 
                                                  c('Educación primaria (nivel 1)', 'Educación primaria (nivel 2)') = 'Educación primaria'; 
                                                  'Educación técnica (Educación superior no universitaria)' = 'Educación técnica'")) 
                     
datos$educacion <- factor(datos$educacion, levels = c('Nunca estudió', 
                                     'Educación preescolar', 
                                     'Educación primaria', 
                                     'Educación secundaria', 
                                     'Educación técnica', 
                                     'Educación universitaria', 
                                     'Postitulos y maestría', 
                                     'Doctorado'))
```

## 5.1. Creación de variable dependiente dicotómica

Como señalamos al inicio del práctico, la **variable dependiente** de este modelo de regresión logística será una dicotomización de la variable ingresos. Esta se construirá codificando como `1` a todas aquellas personas cuyos ingresos sean mayores a la media de ingresos, y como `0` a todas las otras personas. Para ello, emplearemos la función `ifelse()` del paquete `base` de R, a modo de generar una variable condicional a partir de lo anteriormente. Empleamos la función `factor()` para transformarla en tal tipo de dato.

```{r crear-dependiente}
datos$ingresos_d <- ifelse(datos$ingresos>mean(datos$ingresos), 1, 0)
```

## 6. Creación del modelo

Una vez realizado lo anterior, es momento de generar nuestro modelo de regresión logística. Emplearemos la función `glm()` del paquete base de `R`, especificando el argumento `family` como `"binomial"`. Lo primero es especificar las variables con las cuales construiremos el modelo: antes de la virgulilla (~) escribiremos nuestra variable dependiente (en este caso, `ingresos_d`), y luego, las variables independientes (aquí, `educacion`, `sexo` y `edad`), separadas con un signo más (+).


```{r modelo-log, message=F}
modelo <- glm(ingresos_d~educacion+sexo+edad, data = datos, family = "binomial")
```

Como podemos ver, se ha creado en nuestro entorno (Environment) un objeto llamado `modelo`. Sin embargo, así como está el objeto no nos provee de información útil, por lo que emplearemos el paquete `sjPlot` para visualizarlo.

## 7. Visualización del modelo

A continuación, visualizaremos el modelo con el comando `tab_model()` de la librería `sjPlot`. Por defecto, para las medidas de ajuste, se presenta el R^^2 de Tjur (Pseudo-R^^2)

```{r tabla, message=F}
sjPlot::tab_model(modelo, 
                  show.ci=FALSE, 
                  p.style = "stars", 
                  dv.labels = "Modelo",
                  string.pred = "Predictores", 
                  string.est = "β")
```

Para el caso de las variables categóricas (que han sido transformadas a tipo `factor`), R toma como categoría de referencia al primer nivel (`level`) de la variable. En el caso de `educacion`, por ejemplo, la categoría de referencia es _Nunca estudió_; y para `sexo`, la categoría de referencia es _Hombre_. Sin embargo, podemos emplear la función `relevel` para establecer una nueva categoría de referencia para una variable en particular. Probemos estableciendo la categoría _Mujer_ como la referencia para la variable `sexo`:

```{r relevel}
datos$sexo <- relevel(datos$sexo, ref = 'Mujer')
```

Volvemos a generar y visualizar el modelo, creando un nuevo objeto llamado `modelo_r`, y visualizando ambos con `tab_model()`

```{r modelo-relevel, message=F}
modelo_r <- glm(ingresos_d~educacion+sexo+edad, data = datos, family = "binomial")
sjPlot::tab_model(list(modelo, modelo_r), 
                  show.ci=FALSE, 
                  p.style = "stars", 
                  dv.labels = c("Modelo", "Modelo (Relevel)"),
                                string.pred = "Predictores", 
                  string.est = "β")
```

Podemos darnos cuenta de que el _output_ de este código incluye a ambos modelos, uno junto a otro. Las tablas generadas con `tab_model()` incluyen cada uno de los coeficientes y sus niveles de significancia estadística (señalados con asteriscos *), así como el pseudo R^^2 de Tjur.

## 8. Exponenciación de los coeficientes

No obstante, por defecto el comando `tab_model()` arroja los coeficientes como **logaritmos de las chanches** (Log-odds), lo cual dificulta la interpretación de los coeficientes. Para que el output de la tabla se presente como **Odds-ratio**, debemos especificar el argumento `transform = "exp"` 


```{r tabla-odds, message=F}
sjPlot::tab_model(modelo,
                  transform = "exp",
                  show.ci=FALSE,
                  p.style = "stars",
                  dv.labels = "Modelo (OR)",
                  string.pred = "Predictores",
                  string.est = "β")
```

También podemos graficar la significancia estadística de nuestros coeficientes, con `plot_model()` de `sjPlot`. Por defecto, esta función presenta los coeficientes como Odds-ratio

```{r plot-sig}
plot_model(modelo,
           ci.lvl = (0.95),
           title = "Estimación de predictores",
           vline.color = "purple",
           show.values = TRUE)+ 
  theme_sjplot()
```

## Resumen

En este práctico, aprendimos a generar modelos de regresión logística, presentando los coeficientes en Log-Odds y Odds-ratio, y a graficar la significación estadística de tales coeficientes. 

