---
title: "Análisis Descriptivo"
linktitle: "4: Descriptivos"
date: "2021-08-23"
menu:
  example:
    parent: Ejemplos
    weight: 4
type: docs
toc: true
editor_options: 
  chunk_output_type: console
---

# 0. Objetivo del práctico

El objetivo del práctico, es avanzar en el análisis de los datos a través del uso de **estadísticos descriptivos**. Para esto ya debemos contar con datos previamente [procesados del práctico N°3](/example/03-practico). Recordemos en qué parte del proceso estamos

![](https://github.com/learn-R/slides/raw/main/img/01/flow-rproject.png)


En este práctico veremos tanto la _estimación puntual_ de estadísticos descriptivos, como su _visualización_ para reportes, ya sea a través de tablas o de gráficos. 


##  Recursos del práctico

En este práctico utilizamos los **datos** procesados *CASEN 2020*, que proviene de los datos originales de [**Encuesta de Caracterización Socioeconómica (CASEN)**](http://observatorio.ministeriodesarrollosocial.gob.cl/encuesta-casen-en-pandemia-2020).Recuerden _**siempre**_ consultar el [**libro códigos**](http://observatorio.ministeriodesarrollosocial.gob.cl/storage/docs/casen/2020/Libro_de_codigos_Base_de_Datos_Casen_en_Pandemia_2020.pdf) antes de trabajar datos.

- [<i class="fas fa-file-archive"></i> `04-bloque.zip`](https://github.com/learn-R/06-class/raw/main/04-bloque.zip)


# 1. Paquetes a utilizar

Para este práctico utilizaremos principalmente, las librerías `sjmisc` y `sjPlot`. 

`sjmisc`: esta paquete tiene múltiples funciones, desde la transformación de datos y variables. Este paquete suele complementar a  `dplyr` de `tidyverse` en sus funciones. 

`sjPlot`: su principal función es la visualización de datos para estadística en ciencias sociales mediante tablas y gráficos.

Cargaremos los paquetes con `pacman` [revisar práctico anterior](https://learn-r-udp.netlify.app/example/03-practico/)

```{r librerias, echo=TRUE, results='hide'}
pacman::p_load(sjmisc,
               sjPlot,
               tidyverse,
               magrittr)
theme_set(theme_sjplot2())
```

# 2. Importar datos

Una vez cargado los paquetes a utilizar, debemos pasar al segundo paso: cargar los datos. Como indicamos al inicio, seguiremos utilizando los datos **CASEN* que fue procesada en el práctico anterior, pero le añadimos una variable.

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)


load(url("https://github.com/learn-R/06-class/raw/main/06-clase/output/data/datos_proc.RData"))
```

```{r, eval = F }
load("output/data/datos_proc.RData")
```

# 3. Explorar datos

Pero ¿cómo sabremos cuales son las variables que componen la base de datos procesada?, para ello usaremos dos códigos para conocer la **base procesada** que usaremos:

el código `names`, nos entrega los nombres de las variables que componen el data set

```{r names, echo=TRUE, results='markup'}
names(datos_proc)
```

Mientras que la función `head` nos entrega el nombre y las primeras 10 filas que la componen.

```{r head, echo=TRUE, results='markup'}
head(datos_proc)
```

Gracias a estos códigos sabemos que tenemos una aproximación de las variables que podríamos utilizar. Por el práctico anterior sabemos que podemos explorar nuestros datos con `sjPlot::view_df()`

```{r, echo=F}
sjPlot::view_df(datos_proc,
                encoding = "UTF-8")
```

# 4. Descripción de variables

Una vez conocidas las variables que incluye nuestros datos procesados, ¿cómo podemos realizar un análisis descriptivo para algún informe o reporte? Veamos algunas de las más comunes

## 4.1. Medidas de tendencia central

Para conocer las medidas de tendencia central de las variables hay dos opciones. En la **primera** se puede pedir el estadístico manualmente, en la **segunda** se puede pedir una tabla resumen. 

### Media

Para conocer la media de una variable se utiliza la función `mean()`, su estructura es:

```{r ejemplo mean, eval=FALSE, include=TRUE}
mean(datos$variable, na.rm=TRUE)
```


El argumento `na.rm=TRUE` excluye del cálculo a los casos perdidos. Esto aplicado a nuestra variable `ingreso_percapita` se ve así:

```{r casen mean, echo=TRUE, results='markup'}
mean(datos_proc$ingreso_percapita, na.rm=TRUE)
```

### Media recortada

Pero, ¿qué pasa si la variable `ingreso_percapita` esta influenciada por casos influyentes? Para eso puedo pedir la media recortada agregando el argumento `trim` para excluir al 5% de cada extremo

```{r casen mean trim, echo=TRUE, results='markup'}
mean(datos_proc$ingreso_percapita, na.rm=TRUE, trim = 0.025)
```

Aquí podemos ver que el valor es distinto. 

Ya conocimos el promedio de la variable `ingreso_percapita` podemos informar cuanto es el promedio del ingreso en el hogar en Chile, pero antes de eso queremos saber ¿cuánto gana el 50% de los hogares? Para eso calcularemos la **mediana**

### Mediana

Para el cálculo de la mediana se utiliza el comando median, su estructura es similar a la `mean()`:

```{r ejemplo median, eval=FALSE, include=TRUE}
median(datos$variable, na.rm =TRUE)
```

```{r casen median, echo=TRUE, results='markup'}
median(datos_proc$ingreso_percapita, na.rm =TRUE)
```

Ahora ya sabemos que al menos un 50% de las familias en Chile tienen por ingreso `$229.184`.

Ya tenemos los estadísticos principales, pero ¿cómo los reportamos? ¿tenemos que sacar el promedio de cada variable una por una? **¡No!**, para ello `sjmisc` tiene diferentes funciones, que veremos a continuación

## Un resumen

Podemos obtener un resumen de todos estadísticos a partir de la función `summary()`. El argumento puede ser tanto una columna en particular como `ingreso_percapita` 

```{r casen summary, echo=TRUE, results='markup'}
summary(datos_proc$ingreso_percapita)
```

También podemos hacerlo con todos los datos. Sólo que no tendrá mucho sentido para las variables nominales.

```{r casen summary base, echo=TRUE, results='markup'}
summary(datos_proc)
```

`summary()` es una función muy potente, dado que no solo permite resúmenes de data.frames (datos), sino que también de otros objetos en R (como los modelos).

Ahora bien tiene limitantes para interactuar con `dplyr` y generar archivos de salida. Por ello ocuparemos `descr` de `sjmisc`

```{r , eval=FALSE, message=FALSE, warning=FALSE, include=TRUE}
sjmisc::descr(datos_proc$ingreso_percapita,
        show = "all",
        out = "viewer",
        encoding = "UTF-8",
        file = "output/figures/tabla-ingreso.doc")
```

```{r echo=FALSE}
sjmisc::descr(datos_proc$ingreso_percapita)
```


De más variables

```{r, , eval=FALSE, message=FALSE, warning=FALSE, include=TRUE}
datos_proc %>%
select(ingreso_percapita,  horas_mens) %>% 
sjmisc::descr(
  show = "all",
  out = "viewer",
  encoding = "UTF-8",
  file = "output/figures/tabla1.doc")
```

```{r echo=FALSE}
datos_proc %>%
select(ingreso_percapita, horas_mens) %>% 
sjmisc::descr()
```


Aquí podemos ver la variable `var`, el tipo de variable `type`, su etiqueta `label`, los casos válidos `n`, los casos perdidos `NA.prc`, las medidas de tendencia central y las de dispersión. `sjmisc` tiene muchos beneficios, ya que cómo interactúa con el mundo `tidyverse` es fácil de complementar con funciones como `select` de `dplyr`. Además con la función `file` se puede exportar automáticamente la tabla para los reportes.


## 4.3. Frecuencias 

### Frecuencias absolutas

Para conocer las frecuencias absolutas de una variable se podría usar la función `table`, esta nos arroja la frecuencia por cada categoría de respuesta

```{r casen table, echo=TRUE, results='markup'}
table(datos_proc$sexo) 
```

También podríamos usar la función `flat_table`, esta puede agrupar más variables y agruparlas.

```{r casen flat_table, echo=TRUE, results='markup'}
flat_table(datos_proc, sexo, ocupacion, ife)
```

El problema es ¿cómo podríamos reportarla en nuestros informes? Si queremos una tabla general usaremos la función `frq`. Esta función devuelve una tabla de frecuencias de vectores etiquetados, como marco de datos.

```{r casen frq error, echo=TRUE, results='markup'}
sjmisc::frq(datos_proc$sexo,
        out = "viewer",
         title = "Frecuencias",
        encoding = "UTF-8",
         file = "output/figures/tabla2.doc") 
```


# 5. Visualización

Ahora que ya sabemos como tener todos los estadísticos necesarios para escribir nuestros reportes, viene el segundo paso *visualizar los estadísticos*. Esto lo haremos con `sjPlot`

Para visualizar las frecuencias usaremos la función `plot_frq`, su estructura es la siguiente:

```{r ejemplo frecuencias, eval=FALSE, message=FALSE, warning=FALSE, include=TRUE}
plot_frq(datos,  #base
  ...,          #variable
  title = "",   # título
  type = c("bar", "dot", "histogram", "line", "density", "boxplot", "violin") #tipo de gráfico
  
```

Para los gráficos, tenemos los siguientes códigos

## 5.1. Gráfico de barras de frecuencias simple

Si quisiéramos presentar gráficos que entreguen la frecuencia de cada categoría de respuesta, podemos presentarla de la siguiente forma:


```{r casen barras simple, echo=TRUE, message=FALSE, warning=FALSE, results='markup'}
plot_frq(datos_proc, edad_tramo,
          title = "Gráfico de frecuencias, barras",
          type = c("bar"))
```

{{< div "note" >}}

Además de la visualización es importante el guardar los datos que se producen y `sjPlot` tiene su propio código para hacerlo a través de la función `save_plot()`, su estructura es esta:

save_plot(last_plot())  #se deja el formato del archivo (.png, .jpg, .svg o .tif) y la ruta de la carpeta
{{< /div >}}

Así guardaríamos el gráfico anterior

```{r eval=F, include=TRUE}
save_plot(last_plot("/output/img/tab.png"))
```


## 5.2. Gráfico de puntos

Si tenemos más categorías y queremos mejorar el reporte, podemos usar este código:

```{r casen puntos simple, echo=TRUE, message=FALSE, warning=FALSE, results='markup'}
plot_frq(datos_proc, edad_tramo,
          title = "Gráfico de frecuencias, puntos",
          type = c("dot"))
```

También podemos cambiar el orden del eje x e y

```{r casen puntos cambiados, echo=TRUE, message=FALSE, warning=FALSE, results='markup'}
plot_frq(datos_proc$edad_tramo, type = "dot", show.ci = TRUE, sort.frq = "desc",
  coord.flip = TRUE, expand.grid = TRUE, vjust = "bottom", hjust = "left", title = "Gráfico de frecuencias, puntos cambiado"
)
```
       
## 5.3 Histogramas        
       
Otra función que podemos hacer es graficar histogramas, sin embargo, como ya hemos visto, la variable `ingreso_percapita` tiene casos muy altos que distorsionan la variable. Para solucionar esto, ocuparemos lo aprendido en [el práctico anterior](https://learn-r-udp.netlify.app/example/03-practico/) y filtraremos la variable sacando los ingresos mayores a `$2.000.000`, con la función `filter` de `dplyr`

```{r casen histograma, echo=TRUE, message=FALSE, warning=FALSE, results='markup'}
datos_proc %>%  filter(ingreso_percapita <= 2000000) %>% 
plot_frq(., ingreso_percapita,
          title = "Histograma",
          type = c("histogram"))
```

## 5.4 Densidad

Ahora que vemos la distribución del histograma, ¿cómo podemos ver su densidad?, es muy simple, para ello haremos un gráfico de densidad con el siguiente código

```{r casen densidad, echo=TRUE, results='markup'}
datos_proc %>%  filter(ingreso_percapita <= 2000000) %>%
plot_frq(., ingreso_percapita,
          title = "Gráfico de densidad",
          type = c("density"))
```

## 5.5 Gráfico de cajas

Para graficar los estadísticos de una variable, podemos hacerlo a través de un gráfico de cajas, para ello usaremos este código:

```{r casen box, echo=TRUE, message=FALSE, warning=FALSE, results='markup'}
datos_proc %>%  filter(ingreso_percapita <= 2000000) %>%
plot_frq(., ingreso_percapita,
          title = "Gráfico de caja",
          type = c("boxplot"))
```

          
## 5.6 Gráfico de violín

Finalmente, si queremos presentar gráficos de violín, usamos este código
          
```{r casen violin, echo=TRUE, message=FALSE, warning=FALSE, results='markup'}
datos_proc %>%  filter(ingreso_percapita <= 2000000) %>%
    plot_frq(., ingreso_percapita,
          title = "Gráfico de violín",
          type = c("violin"))
```
          
Como pueden ver, el único argumento que se modificaba era `type = `, es decir, para hacer diversos gráficos, sólo se debe especificar el tipo de gráfico que queremos.


## 5.7 Gráfico de nube de puntos

Ahora, si quisiéramos graficar la distribución de dos variables, podemos hacerlo con la función `plot_scatter`, esta muestra el diagrama de dispersión de dos variables.

```{r casen scatter, echo=TRUE, message=FALSE, warning=FALSE, results='markup'}
datos_proc %>%
  filter(ingreso_percapita <= 2000000, horas_mens <= 600) %>%
   plot_scatter(., horas_mens, ingreso_percapita)
```

También es posible agregar una variable de ocupación al diagrama de dispersión.

```{r casen scatter 3 var, echo=TRUE, message=FALSE, warning=FALSE, results='markup'}
datos_proc %>%  filter(ingreso_percapita <= 2000000, horas_mens <= 600) %>%
    plot_scatter(., horas_mens, ingreso_percapita, edad_tramo)
```

# 6. Visualización bivariada

Ahora que ya hemos graficado las frecuencias de las variables, vamos a graficar frecuencias agrupadas, para ello usaremos la función `plot:grpfrq` de `sjPlot`, su estructura es la siguiente

```{r ejemplo frecuencias agrup, eval=FALSE, message=FALSE, warning=FALSE, include=TRUE}
plot_grpfrq(
  var.cnt,
  var.grp,
  type = c("bar", "dot", "line", "boxplot", "violin")
```

# 6.1 Gráfico de barras

La primera opción que nos entrega este código son los gráficos de barra, para usarlo queremos saber cuantos hombres y mujeres trabajaron al menos una hora la semana pasada, para ello graficaremos la variable `sexo` y `ocupacion`

```{r casen frec agrup barr, echo=TRUE, message=FALSE, warning=FALSE, results='markup'}
plot_grpfrq(datos_proc$sexo, datos_proc$ocupacion,
  type = c("bar"), title = "Gráfico de barras")
```

Podemos ver que no solo nos muestra la frecuencia absoluta, sino que también la relativa en porcentaje

Pero además podemos ver agregar una tercera categoría, que es el total de ambas categorías. Para este ejercicio conoceremos que tramo de edad trabajo la semana pasada.

Para este ejercicio usaremos la función `plot_xtab`, de la misma librería

```{r casen frec agrup barr 2, echo=TRUE, message=FALSE, warning=FALSE, results='markup'}
plot_xtab(datos_proc$edad_tramo, datos_proc$ocupacion, title = "Gráfico de barras")
```

# 6.2 Gráfico de barras horizontales

Con la misma función podemos graficar mediante barras horizontales

```{r casen frec agrup barr hor, echo=TRUE, message=FALSE, warning=FALSE, results='markup'}
plot_xtab(datos_proc$edad_tramo, datos_proc$ocupacion, margin = "row", 
          bar.pos = "stack",
          title = "Gráfico de barras horizontales",
         show.summary = TRUE, coord.flip = TRUE)
```


## 6.3 Gráfico de líneas

Otra opción que tiene esta función, es la creación de gráficos de líneas, para ello conoceremos la relación entre el tramo etario y el recibir el IFE

```{r casen graf lin agrup, echo=TRUE, message=FALSE, warning=FALSE, results='markup'}
plot_grpfrq(datos_proc$edad_tramo, datos_proc$ife,
            title = "Gráfico de línea",
            type = c("line"))
  
```

También podemos ver la relación de el tramo etario y si trabajó la semana pasada

```{r casen graf line agrup 2, echo=TRUE, message=FALSE, warning=FALSE, results='markup'}
plot_grpfrq(datos_proc$edad_tramo, datos_proc$ocupacion, 
            title = "Gráfico de línea",
            type = "line")
```
         

## 6.4 Gráfico de cajas

Ahora si queremos conocer cómo interactúa las horas de trabajo con el tramo etario, podemos visualizarlo mediante un gráfico de cajas

```{r casen graf caj, echo=TRUE, message=FALSE, warning=FALSE, results='markup'}
plot_grpfrq(datos_proc$horas_mens, datos_proc$edad_tramo,
            title = "Gráfico de caja",
             type = c("boxplot"))
```

Además, se puede incorporar una tercera variable, en este caso lo haremos con la variable `sexo`

```{r casen box 3 var, echo=TRUE, message=FALSE, warning=FALSE, results='markup'}
plot_grpfrq(datos_proc$horas_mens, datos_proc$edad_tramo, intr.var = datos_proc$sexo, 
            title = "Gráfico de cajas",
            type = "box")
```

Nuevamente, la función nos permite la creación de múltiples gráficos, sólo se debe cambiar el argumento `type =`

# 7. Tablas de contingencia

¡No podemos terminar sin saber cómo hacer tablas de frecuencias cruzadas!

Por suerte `sjPlot` tiene la función `sjt.xtab`, que nos entrega tablas de frecuencias cruzadas

```{r casen tab cruz, echo=TRUE, results='markup'}
sjt.xtab(datos_proc$sexo, datos_proc$ife,  title = "Tabla de contingencias",
         show.col.prc=TRUE,
         show.summary=FALSE)
```

¿Qué pasó? ¿por qué salen esos símbolos raros en la tabla? 

¡Es por la codificación!, para ello le agregamos el argumento `encoding = "UTF-8"` y ya tenemos nuestra tabla de frecuencias cruzadas

```{r casen tab cruz encoding, echo=TRUE, results='markup'}
sjt.xtab(datos_proc$sexo, datos_proc$ife,
         show.col.prc=TRUE,
         show.summary=FALSE, 
         encoding = "UTF-8", 
         title = "Tabla de contingencia",
         file = "output/figures/tabla3.doc")
```

# 8. Correlación

Ahora veremos estadísticos bivariados, como la correlación, en esta ocasión generaremos una tabla de correlación entre las variables `horas_mens` y `ingreso_percapita`, para eso usaremos la función `tab_corr` de `sjPlot`

Previamente debemos seleccionar las variables a utilizar, ya que no tiene sentido incluir en el análisis variables nominales

```{r casen corr, echo=TRUE, results='markup'}
datos_proc %>%
select(ingreso_percapita, horas_mens) %>% 
tab_corr(.,
         triangle = "lower",   
         title = "Tabla de correlación",
         encoding = "UTF-8", 
         file = "output/figures/tabla4.doc")
```


# 9. Anova

Finalmente, si queremos reportar un análisis de Anova, no podemos dejar de lado este gráfico que nos otorga la función `sjp.aov1` del paquete `sjPlot`

```{r message=FALSE, warning=FALSE}
sjp.aov1(datos_proc$ingreso_percapita, datos_proc$sexo, title = "Anova")
```

# 9. Resumen del práctico

¡Eso es todo por este práctico! Hoy aprendimos a:

- Manejar datos descriptivos en Rstudio
- A obtener tablas descriptivas
- A visualizar los descriptivos
- A obtener tablas de contingencia
- A obtener tablas de correlación
- A obtener gráficos de Anova

# 7. Reporte de progreso

¡Recuerda rellenar tu [reporte de progreso](https://learn-r.formr.org/). En tu correo electrónico está disponible el código mediante al cuál debes acceder para actualizar tu estado de avance del curso.

