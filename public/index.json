[{"authors":null,"categories":null,"content":"Aquí podrán encontrar recursos y guías extras sobre uso de R, datos y otros tópicos relevantes.\n","date":1628812800,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1628812800,"objectID":"e5656835a9d5f0c69a44e56dc2b58101","permalink":"/resource/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/resource/","section":"resource","summary":"Aquí podrán encontrar recursos y guías extras sobre uso de R, datos y otros tópicos relevantes.","tags":null,"title":"Recursos","type":"docs"},{"authors":null,"categories":null,"content":"Visit this section after you have finished the readings and lecture videos. It contains fully annotated R code and other supplementary information and it will be indispensable as you work on your problem sets and project.\nMany sections also contain videos of me live coding the examples so you can see what it looks like to work with R in real time. You\u0026rsquo;ll notice me make all sorts of little errors, which is totally normal—everyone does!\n","date":1628812800,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1628812800,"objectID":"e9b55dc35cd7c0402d035e510f00bf75","permalink":"/example/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/example/","section":"example","summary":"Visit this section after you have finished the readings and lecture videos. It contains fully annotated R code and other supplementary information and it will be indispensable as you work on your problem sets and project.","tags":null,"title":"Prácticos (códigos de ejemplo)","type":"docs"},{"authors":null,"categories":null,"content":"The main goals of this class are to help you design, critique, code, and run rigorous, valid, and feasible evaluations of public sector programs. Each type of assignment in this class is designed to help you achieve one or more of these goals.\nWeekly check-in Every week, after you finish working through the content, I want to hear about what you learned and what questions you still have. To facilitate this, and to encourage engagement with the course content, you\u0026rsquo;ll need to fill out a short response on iCollege. This should be ≈150 words. That\u0026rsquo;s fairly short: there are ≈250 words on a typical double-spaced page in Microsoft Word (500 when single-spaced).\nYou should answer these two questions each week:\n What was the most exciting thing you learned from the session? Why? What was the muddiest thing from the session this week? What are you still wondering about?  I will grade these check-ins using a check system:\n ✔+: (11.5 points (115%) in gradebook) Response shows phenomenal thought and engagement with the course content. I will not assign these often. ✔: (10 points (100%) in gradebook) Response is thoughtful, well-written, and shows engagement with the course content. This is the expected level of performance. ✔−: (5 points (50%) in gradebook) Response is hastily composed, too short, and/or only cursorily engages with the course content. This grade signals that you need to improve next time. I will hopefully not assign these often.  Notice that is essentially a pass/fail or completion-based system. I\u0026rsquo;m not grading your writing ability, I\u0026rsquo;m not counting the exact number of words you\u0026rsquo;re writing, and I\u0026rsquo;m not looking for encyclopedic citations of every single reading to prove that you did indeed read everything. I\u0026rsquo;m looking for thoughtful engagement, that\u0026rsquo;s all. Do good work and you\u0026rsquo;ll get a ✓.\nYou will submit these responses via iCollege.\nProblem sets To practice writing R code, running inferential models, and thinking about causation, you will complete a series of problem sets.\nThere are 9 problem sets on the schedule. I will keep the highest grades for 8 of them. That is, I will drop the lowest score (even if it\u0026rsquo;s a zero). This means you can skip one of the problem sets. You need to show that you made a good faith effort to work each question. I will not grade these in detail. The problem sets will be graded using a check system:\n ✔+: (33 points (110%) in gradebook) Assignment is 100% completed. Every question was attempted and answered, and most answers are correct. Document is clean and easy to follow. Work is exceptional. I will not assign these often. ✔: (30 points (100%) in gradebook) Assignment is 70–99% complete and most answers are correct. This is the expected level of performance. ✔−: (15 points (50%) in gradebook) Assignment is less than 70% complete and/or most answers are incorrect. This indicates that you need to improve next time. I will hopefully not asisgn these often.  You may (and should!) work together on the problem sets, but you must turn in your own answers. You cannot work in groups of more than four people, and you must note who participated in the group in your assignment.\nEvaluation assignments For your final project, you will conduct a pre-registered evaluation of a social program using synthetic data. To (1) give you practice with the principles of program evaluation, research design, measurement, and causal diagrams, and (2) help you with the foundation of your final project, you will complete a set of four evaluation-related assignments.\nIdeally these will become major sections of your final project. However, there is no requirement that the programs you use in these assignments must be the same as the final project. If, through these assignments, you discover that your initially chosen program is too simple, too complex, too boring, etc., you can change at any time.\nThese assignments will be graded using a check system:\n ✔+: (33 points (110%) in gradebook) Assignment is 100% completed. Every question was attempted and answered, and most answers are correct. Document is clean and easy to follow. Work is exceptional. I will not assign these often. ✔: (30 points (100%) in gradebook) Assignment is 70–99% complete and most answers are correct. This is the expected level of performance. ✔−: (15 points (50%) in gradebook) Assignment is less than 70% complete and/or most answers are incorrect. This indicates that you need to improve next time. I will hopefully not asisgn these often.  Exams There will be two exams covering (1) program evaluation, design, and causation, and (2) the core statistical tools of program evaluation and causal inference.\nYou will take these exams online through iCollege. The exams will have a time limit, but you can use notes and readings and the Google. You must take the exams on your own though, and not talk to anyone about them.\nFinal project At the end of the course, you will demonstrate your knowledge of program evaluation and causal inference by completing a final project.\nComplete details for the final project are here.\nThere is no final exam. This project is your final exam.\n","date":1618790400,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1618790400,"objectID":"e18c399687bc0897ffd6503c7a1bbb8e","permalink":"/assignment/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/assignment/","section":"assignment","summary":"The main goals of this class are to help you design, critique, code, and run rigorous, valid, and feasible evaluations of public sector programs. Each type of assignment in this class is designed to help you achieve one or more of these goals.","tags":null,"title":"Assignment details","type":"docs"},{"authors":null,"categories":null,"content":"Cada sesión de clases está dividida por una pestaña que puedes ver al costado izquierdo de tu pantalla. Dentro de cada página por sesión podrás encontrar\n (Slides) que es la presentación mostrada en clases. Encontrarás estos botones de modo de facilitar la descarga de la presentación y explorar las presentaciones   Ver las slides en una nueva ventana  Descargar las slides en PDF\nLa presentación también se puede ver directamente desde el sitio web del curso. Puedes presionar estas presentaciones y puedes navegar en ellas con ← y →. Si presionas ? (o shift + /) mientras estas viendo las slides, podrás ver una lista de comandos que te permitirán interactuar con ellos (por ejemplo, f sirve para ver en pantalla completa. También p modo presentador si quieres ver las notas. El lápiz en la esquina derecha te permite dejar tus propias notas).\n  Video de la grabación de la clase, que además estará disponible en la nube de Zoom\n  Material asociado a la clase, lo que incluye los ejemplos prácticos y contenido adicional que puede potenciar sus aprendizajes.\n  ","date":-62135596800,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":-62135596800,"objectID":"8899c927408853efa5f455eaa551e047","permalink":"/content/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/content/","section":"content","summary":"Cada sesión de clases está dividida por una pestaña que puedes ver al costado izquierdo de tu pantalla. Dentro de cada página por sesión podrás encontrar\n (Slides) que es la presentación mostrada en clases.","tags":null,"title":"Clases, prácticos y materiales","type":"docs"},{"authors":null,"categories":null,"content":"Contenido 1. R R es un lenguaje de programación y software de código abierto, empleado en procesamiento, análisis y visualización de datos estadísticos, altamente extendibles.\nVentajas: Las principales ventajas son:\n  Es un lenguaje de programación destacado en lo que respecta al análisis estadístico\n  Es de acceso y código abierto\n  Permite graficar el análisis y los datos estadísticos de forma eficiente y llamativa\n  Se encuentra en constante actualización y desarrollo\n  Para descargar R, deben dirigirse al siguiente link, y seguir los pasos de instalación según su sistema operativo. Para el caso de Windows y macOS, se debe descargar el instalador de R, ejecutarlo, y proseguir con la instalación. Lo recomendado es instalarlo en español, y mantener las opciones de instalación que vienen por defecto.\nA continuación, se presentan imágenes del proceso de instalación de R en Windows\nSe aceptan las condiciones de uso\nSe define la carpeta de instalación. Pueden escoger donde deseen realizar la instalación clickeando en examinar; no obstante, se recomienda mantener la ruta predeterminada, en Archivos de programa\nSe recomienda seleccionar la Instalación de usuario\nAsimismo, también es recomendable no especificar las opciones de configuración\nSi se desea, se pueden crear accesos directos. Lo que sí es importante, es guardar el número de versión en el registro, y asociar archivos .RData con R (lo análogo a asociar archivos .sav con SPSS, o archivos .dta con STATA)\nParticularmente para el caso de macOS, es indispensable la instalación de XQuartz, pues este software nos permitirá visualizar, por ejemplo, los gráficos que elaboremos en R. Para ello, debemos dirigirnos al siguiente enlace, descargar la última versión disponible del software, y seguir el proceso de instalación. Tal como en el caso de R, lo recomendado es mantener la configuración predeterminada.\nPara el caso de Ubuntu, la versión 4.1 de R (que es la actual) viene incluida para gran parte de las versiones de Ubuntu. Para poder ejecutarlas, deben abrir el terminal y ejecutar los siguientes códigos (disponibles en el mirror de Ubuntu):\nSiguiendo los pasos anteriores, la instalación de R está finalizada.\nSin embargo, para laborar y aprender de manera más cómoda y eficiente, este curso trabajará principalmente con RStudio.\n2. RStudio Es un ambiente integrado de desarrollo para R (y Python, otro lenguaje de programación, que no se abordará en este curso), que permite visualizar el trabajo llevado a cabo, de manera más cómoda, sencilla y eficiente.\nPara instalarlo, deben dirigirse a la siguiente página web. Allí, en la sección All Installers, seleccionar el instalador correspondiente a su sistema operativo.\nEl proceso de instalación es el mismo que para R. Simplemente, se recomienda mantener todo en predeterminado.\n2.1. RStudio Cloud Sin embargo, también está la opción de trabajar en RStudio Cloud, en caso que sus computadores no presenten los requerimientos mínimimos para trabajar con RStudio de manera local. Para poder trabajar en RStudio Cloud, debemos crear un usuario. Sin embargo, primero crearemos un usuario en GitHub, para luego conectarse a RStudio Cloud desde allí.\nEntonces, debemos dirigirnos a la página de GitHub. Allí, debemos hacer click en Sign up.\nUna vez allí, debemos ingresar nuestro correo electrónico, y luego seguir los pasos que se encuentran en el correo de confirmación. Es recomendable que creen la cuenta con la dirección de correo electrónico que usen cotidianamente.\nPosteriormente, nos dirigimos a la página de RStudio Cloud, y hacemos click en Sign Up.\nVolvemos a hacer click en Sign Up\nLuego, hacemos click en Sign Up with GitHub\nSe nos redirigirá a la página de GitHub, donde debemos ingresar los datos del usuario de GitHub que creamos en pasos anteriores.\nUna vez realizado todo lo anterior, ingresaremos a RStudio Cloud. Allí, encontraremos nuestro espacio de trabajo (Your Workspace), donde podremos encontrar nuestros proyectos.\nHaciendo click en la pestaña Projects, situada en la pestaña superior, aparecerá el botón New Project. Al pulsarlo, podremos crear un nuevo proyecto.\nLuego, se generará el nuevo proyecto. Es importante que renombremos el nuevo proyecto, haciendo click en el recuadro que se encuentra en la sección superior (en este caso, el proyecto se nombró como Proyecto 1).\nPara cargar archivos (como bases de datos, o archivos .R), debemos hacer click en el botón Upload, situado en la sección Files situada en la esquina inferior derecha. Aparecerá una ventana emergente, y debemos hacer click en Seleccionar archivo, para explorar en nuestra computadora los archivos que necesitemos para trabajar.\nTambién podemos exportar el proyecto (con todos sus archivos asociados), haciendo click en el botón More (al lado del engranaje). Es importante que hagamos click en las casillas situadas a la izquierda de todos los archivos que deseemos descargar.\nEn la sección superior derecha, encontraremos un engranaje. En la pestaña Info encontraremos la información general del proyecto; además, podremos agregar una descripción general de este.\nA la derecha de Info, encontraremos la pestaña Access. Allí, podremos cambiar quiénes pueden ver el proyecto. Por defecto, solamente quien creó el proyecto puede verlo; sin embargo, podemos permitir que cualquiera (Everyone) pueda hacerlo.\nPara poder compartir nuestros proyectos, debemos hacer click en los tres puntos situados a la derecha del engranaje, y luego hacer click en Share Project Link. Aparecerá una ventana emergente, donde podemos agregar las direcciones de correo electrónico de todas las personas que queramos invitar al proyecto. También podemos agregar un mensaje a la invitación.\n3. Slack Este software será el principal medio de comunicación en el marco del curso. Allí, las y los estudiantes podrán plantear todas sus dudas, para que estas puedan ser respondidas de forma colectiva, tanto por parte del equipo docente, como de otras y otros estudiantes.\nPrimero, debemos descargar el instalador de Slack, dependiendo de nuestro sistema operativo:\n Windows macOS Linux  En la siguiente imagen, está el ejemplo de Windows (64 bits)\nUna vez descargado el archivo, debemos ejecutarlo, y seguir el proceso de instalación. Tal como en el resto de los software instalados, recomendamos mantener todas las opciones de instalación por defecto.\nLuego, debemos crear una cuenta de Slack, dirigiéndose a la siguiente página web. Se recomienda usar la dirección de correo que usen de forma cotidiana, a modo de estar al tanto de la actividad en el canal de Slack.\nPosteriormente, deben confirmar su correo electrónico y, por último, han de hacer click en el link Unirse a slack de curso, presente en el apartado Syllabus de la página web. Ello redireccionará a la aplicación, abriendo allí el espacio de trabajo del curso.\nUna vez realizado aquello, debemos permitir que la página web abra la aplicación de Slack, y se nos redirigirá al espacio de trabajo del curso.\nA la izquierda, encontraremos los diversos canales asignados para distintas actividades. Aquellos que tengan a la izquierda un #, son canales abiertos a todas y todos quienes integren el espacio de trabajo; mientras que aquellos que tengan un candado a su izquierda son canales privados. Haciendo click en añadir canales, podemos crear nuevos canales (lo cual pueden hacer cuando, en el futuro, utilicen Slack para sus trabajos personales).\nBajo los canales encontraremos la sección de mensajes directos, donde podremos enviar mensajes privados a cualquier persona que integre el espacio de trabajo. No olviden que pueden comunicarnos todas sus dudas, inquietudes y sugerencias respecto del curso.\nEn la sección superior derecha encontraremos nuestro usuario.\nSi hacemos click, se abrirá una pestaña emergente, donde podremos acceder a diversas configuraciones.\nEn Modificar tu perfil, podemos cambiar nuestro nombre, describir a qué nos dedicamos, definir nuestros pronombres, entre otros elementos. También, podemos seleccionar una foto de perfil, para que el resto de las personas que integren el espacio de trabajo puedan (re)conocernos.\nEn la sección de Preferencias, podremos establecer diferentes configuraciones referentes, por ejemplo, a las notificaciones, la barra lateral, o seleccionar distintos temas, para personalizar la apariencia de nuestro espacio de trabajo.\nUna vez realizado todo lo anterior ¡Ya estamos listas y listos para empezar a trabajar en el curso! 4. Video tutorial en Youtube Recuerden que el video de asociado a este práctico y muchos más podrán encontrarlos en el canal de youtube del curso\n\r\r","date":1628812800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1628812800,"objectID":"c5e6c5f0d0baae071e282245bbba803c","permalink":"/resource/install/","publishdate":"2021-08-13T00:00:00Z","relpermalink":"/resource/install/","section":"resource","summary":"Contenido 1. R R es un lenguaje de programación y software de código abierto, empleado en procesamiento, análisis y visualización de datos estadísticos, altamente extendibles.\nVentajas: Las principales ventajas son:","tags":null,"title":"Instalación de R, RStudio y Slack","type":"docs"},{"authors":null,"categories":null,"content":"Part 1: The basics of R and dplyr For this week\u0026rsquo;s problem set, you need to work through a few of RStudio\u0026rsquo;s introductory primers. You\u0026rsquo;ll do these in your browser and type code and see results there.\nYou\u0026rsquo;ll learn some of the basics of R, as well as some powerful methods for manipulating data with the dplyr package.\nComplete these primers. It seems like there are a lot, but they\u0026rsquo;re short and go fairly quickly (especially as you get the hang of the syntax). Also, I have no way of seeing what you do or what you get wrong or right, and that\u0026rsquo;s totally fine! If you get stuck and want to skip some (or if it gets too easy), go right ahead and skip them!\n The Basics  Visualization Basics Programming Basics   Work with Data  Working with Tibbles Isolating Data with dplyr Deriving Information with dplyr   Visualize Data  Exploratory Data Analysis Bar Charts Histograms Boxplots and Counts Scatterplots Line plots Overplotting and Big Data Customize Your Plots   Tidy Your Data  Reshape Data    Recent versions of tidyr have renamed these core functions: gather() is now pivot_longer() and spread() is now pivot_wider(). The syntax for these pivot_*() functions is slightly different from what it was in gather() and spread(), so you can\u0026rsquo;t just replace the names. Fortunately, both gather() and spread() still work and won\u0026rsquo;t go away for a while, so you can still use them as you learn about reshaping and tidying data. It would be worth learning how the newer pivot_*() functions work, eventually, though (see here for examples).\r\rThe content from these primers comes from the (free and online!) book R for Data Science by Garrett Grolemund and Hadley Wickham. I highly recommend the book as a reference and for continuing to learn and use R in the future.\nPart 2: Getting familiar with RStudio The RStudio primers you just worked through are a great introduction to writing and running R code, but you typically won\u0026rsquo;t type code in a browser when you work with R. Instead, you\u0026rsquo;ll use a nicer programming environment like RStudio, which lets you type and save code in scripts, run code from those scripts, and see the output of that code, all in the same program.\nTo get familiar with RStudio, watch this video (it\u0026rsquo;s from PMAP 8921, but the content still applies here):\n\r\rPart 3: RStudio Projects One of the most powerful and useful aspects of RStudio is its ability to manage projects.\nWhen you first open R, it is \u0026ldquo;pointed\u0026rdquo; at some folder on your computer, and anything you do will be relative to that folder. The technical term for this is a \u0026ldquo;working directory.\u0026rdquo;\nWhen you first open RStudio, look in the area right at the top of the Console pane to see your current working directory. Most likely you\u0026rsquo;ll see something cryptic: ~/\nThat tilde sign (~) is a shortcut that stands for your user directory. On Windows this is C:\\Users\\your_user_name\\; on macOS this is /Users/your_user_name/. With the working directory set to ~/, R is \u0026ldquo;pointed\u0026rdquo; at that folder, and anything you save will end up in that folder, and R will expect any data that you load to be there too.\nIt\u0026rsquo;s always best to point R at some other directory. If you don\u0026rsquo;t use RStudio, you need to manually set the working directory to where you want it with setwd(), and many R scripts in the wild include something like setwd(\u0026quot;C:\\\\Users\\\\bill\\\\Desktop\\\\Important research project\u0026quot;) at the beginning to change the directory. THIS IS BAD THOUGH (see here for an explanation). If you ever move that directory somewhere else, or run the script on a different computer, or share the project with someone, the path will be wrong and nothing will run and you will be sad.\nThe best way to deal with working directories with RStudio is to use RStudio Projects. These are special files that RStudio creates for you that end in a .Rproj extension. When you open one of these special files, a new RStudio instance will open up and be pointed at the correct directory automatically. If you move the folder later or open it on a different computer, it will work just fine and you will not be sad.\nRead this super short chapter on RStudio projects to learn how to create and use them\nIn general, you can create a new project by going to File \u0026gt; New Project \u0026gt; New Directory \u0026gt; Empty Project, which will create a new folder on your computer that is empty except for a single .Rproj file. Double click on that file to open an RStudio instance that is pointed at the correct folder.\nPart 4: Getting familiar with R Markdown To ensure that the analysis and graphics you make are reproducible, you\u0026rsquo;ll do the majority of your work in this class using R Markdown files.\nDo the following things:\n Watch this video:  \r\r  Skim through the content at these pages:\n Using Markdown Using R Markdown How it Works Code Chunks Inline Code Markdown Basics (The R Markdown Reference Guide is super useful here.) Output Formats    Watch this video (again, it\u0026rsquo;s from PMAP 8921, but the content works for this class):\n\r\r  ","date":1628812800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1628812800,"objectID":"1c54211c51c2690aaec09991c5ab4895","permalink":"/example/01-practico/","publishdate":"2021-08-13T00:00:00Z","relpermalink":"/example/01-practico/","section":"example","summary":"Part 1: The basics of R and dplyr For this week\u0026rsquo;s problem set, you need to work through a few of RStudio\u0026rsquo;s introductory primers. You\u0026rsquo;ll do these in your browser and type code and see results there.","tags":null,"title":"Bienvenido/a a R, RStudio y tidyverse","type":"docs"},{"authors":null,"categories":null,"content":"0. Objetivo de la práctica El objetivo del práctico, es avanzar en el procesamiento de los datos a través de la transformación de las variables a utilizar. Para ello revisaremos procedimientos básicos para el manejo de datos con Rstudio.\n1. Recursos de la práctica En este práctico utilizaremos la base de datos de la Encuesta de Caracterización Socioeconómica (CASEN), la cual fue procesada en el Práctico anterior.Recuerden siempre consultar el manual/libro de códigos antes de trabajar una base de datos.\n2. Librerias a utilizar En este práctico utilizaremos cuatro paquetes\n  pacman: este facilita y agiliza la lectura de los paquetes a utilizar en R\n  sjmisc: explorar datos\n  car(): recodificar manteniendo las etiquetas\n  tidyverse: colección de paquetes, del cuál utilizaremos dplyr forcast\n  magrittr: nos permitirá ocupar dos operadores que en R son muy utilizados\n  Pasos del procesamiento 1. Cargar librerías Primero instalamos pacman por única vez\ninstall.packages(\u0026#34;pacman\u0026#34;) library (pacman) Luego cargaremos así los paquetes. Les recordamos que cuando luego de un paquete ponemos :: esto se refiere a que se \u0026ldquo;fuerza\u0026rdquo; que esa función provenga de ese paquete\npacman::p_load(tidyverse, magrittr, car, sjmisc) 2. Cargar base de datos datos \u0026lt;- read_dta(\u0026#34;../Rproject/input/Casen en Pandemia 2020 STATA.dta\u0026#34;) En el panel Environment, visualizamos el nuevo objeto, que posee 185.437 observaciones (o filas), y 650 variables (columnas)\nRecordemos que también podemos explorar la base de datos con las siguientes funciones.\n# De paquete base dim(datos) # nos entrega las dimensiones, es decir el numero de observaciones y el número de variables View(datos) # se usa para visualizar la base de datos names(datos) # entrega los nombres de las variables que componen el dataset head(datos) # muestra las primeras filas presentes en el marco de datos # De sjmisc find_var(datos, \u0026#34;concepto\u0026#34;) # se utiliza para encontrar variables 4. Un aspecto clave antes de comenzar: los operadores Previo a trabajar con la base de datos, debemos repasemos el concepto de operadores. Estos símbolos no son de uso exclusivo en R ¡probablemente los conoces desde tus cursos de matemática! Ahora bien, no todos tienen el mismo significado que en otros softwares.\nLos operadores serán símbolos que permitirán, en los distintos procedimientos de procesamiento, simplificar procesos. Por ejemplo, serán útilizados cuando filtremos nuestros datos para personas de ciertas categorías, cuando calculemos variables nuevas (de manera aritmética o condicional) o, simplemente, cuando queramos hacer procesos \u0026ldquo;concatenados\u0026rdquo;.\nOperadores relacionales Se usan para hacer comparaciones. Cuando en la Tabla 1 nos referimos a un valor, esto refiere tambien a variables\n   Símbolo Función     \u0026lt; Un valor es menor que otro   \u0026gt; Un valor es mayor que otro   == Un valor es igual que otro 1   \u0026lt;= Un valor es menor o igual que otro   \u0026gt;= Un valor es mayor o igual que otro   != Un valor es distinto o diferente que otro   %in% Un valor pertenece al conjunto designado 2   is.na() El valor es perdido o NA   !is.na() El valor es distinto de NA    Operadores aritméticos Realizan operaciones, como la suma, resta, división, entre otros.\n   Símbolo Función     + Suma   - Resta   * Multiplicación   / División   ^ Elevado    Operadores de asignación Hay dos formas de asignar objetoA \u0026lt;- objetoB o objetoA = objetoB. Ambas implican que lo que se este realizando en el objetoB implica que eso va a producir o generar al objetoA\nOperadores booleanos Describen relaciones lógicas o condicionales\n   Símbolo Función     \u0026amp; Indica un y lógico   | Indica un o lógico   xor() Excluye la condición   ! Distinto de \u0026hellip;   any Ninguna de las condiciones serán utilizadas   all Todas las condiciones serán ocupadas    Figura 1: Resumen de operadores\nOperador pipeline %\u0026gt;% ¡Aquí mucha atención! Este operador %\u0026gt;% (llamado pipe) no es un operador que este contenido en las funciones base del lenguaje R. Este operador proviene de la función magrittr de tidyverse, y es de los operadores más útiles y utilizados en R.\n¿Para qué sirve? Para concatenar múltiples funciones y procesos. Imagina que quieres filtrar una base de datos a partir de tramos etarios. Pero no tienes esa variable creada. ¿Que hacer? La respuesta: concatenar el proceso de creación de variables y luego filtrar. Eso se puede hacer gracias a %\u0026gt;% (ya mostraremos como utilizar esta herramienta), que por lo demás es muy fácil de ejecutar.\n Ctrl + shift + M Para Windows ⌘ + shift + M Para Mac  5. Transformación y selección de variables con dplyr() dplyr()es un paquete de tidyverse que proporciona una base para la manipulación de datos, principalmente a partir de funciones que permiten operar las columnas (o variables)\n5.1 select() para manipular variables Para seleccionar variables ocuparemos select(). Existen diversos enfoques para realizarlo. Primero, debemos conocer su estructura\nSi queremos incluir las variables variable1, variable2 y variable3 select(datos, variable1, variable2, variable3)\r\rSi queremos excluir anteponemos un menos -variable1 select(datos, -variable1)\r\rselect() por indexación La indexación refiere al orden que tiene la columna o variable dentro de los datos. Imaginemos que queremos seleccionar:\nselect(datos, 1, 2) # la primera y la segunda columna ## # A tibble: 185,437 x 2 ## folio o ## \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; ## 1 110110010101 1 ## 2 110110010101 2 ## 3 110110010201 2 ## 4 110110010201 1 ## 5 110110010201 3 ## 6 110110010301 2 ## 7 110110010301 3 ## 8 110110010301 1 ## 9 110110010401 1 ## 10 110110010401 2 ## # ... with 185,427 more rows select(datos, 1:4) # la primera hasta la cuarta columna ## # A tibble: 185,437 x 4 ## folio o id_persona id_vivienda ## \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; ## 1 110110010101 1 5 1101100101 ## 2 110110010101 2 6 1101100101 ## 3 110110010201 2 31 1101100102 ## 4 110110010201 1 32 1101100102 ## 5 110110010201 3 30 1101100102 ## 6 110110010301 2 117 1101100103 ## 7 110110010301 3 118 1101100103 ## 8 110110010301 1 116 1101100103 ## 9 110110010401 1 2209 1101100104 ## 10 110110010401 2 2210 1101100104 ## # ... with 185,427 more rows select(datos, c(1,4)) # la primera y la cuarta columna ## # A tibble: 185,437 x 2 ## folio id_vivienda ## \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; ## 1 110110010101 1101100101 ## 2 110110010101 1101100101 ## 3 110110010201 1101100102 ## 4 110110010201 1101100102 ## 5 110110010201 1101100102 ## 6 110110010301 1101100103 ## 7 110110010301 1101100103 ## 8 110110010301 1101100103 ## 9 110110010401 1101100104 ## 10 110110010401 1101100104 ## # ... with 185,427 more rows select() por nombre de columna Si conocemos el nombre de la variable simplemente lo podemos poner y se seleccionará.\nselect(datos, edad, sexo, o1) ## # A tibble: 185,437 x 3 ## edad sexo o1 ## \u0026lt;dbl\u0026gt; \u0026lt;dbl+lbl\u0026gt; \u0026lt;dbl+lbl\u0026gt; ## 1 34 2 [Mujer] 2 [No] ## 2 4 2 [Mujer] NA ## 3 5 2 [Mujer] NA ## 4 45 1 [Hombre] 1 [Sí] ## 5 19 2 [Mujer] 2 [No] ## 6 57 1 [Hombre] 1 [Sí] ## 7 20 1 [Hombre] 2 [No] ## 8 56 2 [Mujer] 2 [No] ## 9 77 1 [Hombre] 2 [No] ## 10 60 2 [Mujer] 2 [No] ## # ... with 185,427 more rows También puedo renombrar en el mismo proceso de selección indicando nuevo_nombre = nombre_original en el proceso de selección\nselect(datos, edad, sexo, ocupacion = o1) ## # A tibble: 185,437 x 3 ## edad sexo ocupacion ## \u0026lt;dbl\u0026gt; \u0026lt;dbl+lbl\u0026gt; \u0026lt;dbl+lbl\u0026gt; ## 1 34 2 [Mujer] 2 [No] ## 2 4 2 [Mujer] NA ## 3 5 2 [Mujer] NA ## 4 45 1 [Hombre] 1 [Sí] ## 5 19 2 [Mujer] 2 [No] ## 6 57 1 [Hombre] 1 [Sí] ## 7 20 1 [Hombre] 2 [No] ## 8 56 2 [Mujer] 2 [No] ## 9 77 1 [Hombre] 2 [No] ## 10 60 2 [Mujer] 2 [No] ## # ... with 185,427 more rows select() para reordenar variables Podemos seleccionar variables y luego indicar que queremos todo el resto de las variables (everythin()). Solo por una cosa de orden. Esto será útil sobre todo cuando tengamos identificadores\nselect(datos, id_persona, sexo, edad, everything()) ## # A tibble: 185,437 x 650 ## id_persona sexo edad folio o id_vivienda region provincia ## \u0026lt;dbl\u0026gt; \u0026lt;dbl+lbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl+lbl\u0026gt; \u0026lt;dbl+lbl\u0026gt; ## 1 5 2 [Mujer] 34 1.10e11 1 1101100101 1 [Región d~ 11 [Iquiq~ ## 2 6 2 [Mujer] 4 1.10e11 2 1101100101 1 [Región d~ 11 [Iquiq~ ## 3 31 2 [Mujer] 5 1.10e11 2 1101100102 1 [Región d~ 11 [Iquiq~ ## 4 32 1 [Hombr~ 45 1.10e11 1 1101100102 1 [Región d~ 11 [Iquiq~ ## 5 30 2 [Mujer] 19 1.10e11 3 1101100102 1 [Región d~ 11 [Iquiq~ ## 6 117 1 [Hombr~ 57 1.10e11 2 1101100103 1 [Región d~ 11 [Iquiq~ ## 7 118 1 [Hombr~ 20 1.10e11 3 1101100103 1 [Región d~ 11 [Iquiq~ ## 8 116 2 [Mujer] 56 1.10e11 1 1101100103 1 [Región d~ 11 [Iquiq~ ## 9 2209 1 [Hombr~ 77 1.10e11 1 1101100104 1 [Región d~ 11 [Iquiq~ ## 10 2210 2 [Mujer] 60 1.10e11 2 1101100104 1 [Región d~ 11 [Iquiq~ ## # ... with 185,427 more rows, and 642 more variables: comuna \u0026lt;dbl+lbl\u0026gt;, ## # zona \u0026lt;dbl+lbl\u0026gt;, area \u0026lt;dbl+lbl\u0026gt;, segmento \u0026lt;dbl\u0026gt;, estrato \u0026lt;dbl\u0026gt;, ## # cod_upm \u0026lt;dbl\u0026gt;, hogar \u0026lt;dbl\u0026gt;, p6_p_con \u0026lt;dbl+lbl\u0026gt;, expr \u0026lt;dbl\u0026gt;, expp \u0026lt;dbl\u0026gt;, ## # expc \u0026lt;dbl\u0026gt;, varstrat \u0026lt;dbl\u0026gt;, varunit \u0026lt;dbl\u0026gt;, fecha_entrev \u0026lt;date\u0026gt;, ## # metodologia_entrev \u0026lt;dbl+lbl\u0026gt;, tot_hog \u0026lt;dbl\u0026gt;, numviv \u0026lt;dbl\u0026gt;, ## # informante_idoneo \u0026lt;dbl+lbl\u0026gt;, tel1 \u0026lt;dbl+lbl\u0026gt;, tel2 \u0026lt;dbl+lbl\u0026gt;, ## # tel3 \u0026lt;dbl+lbl\u0026gt;, tel4 \u0026lt;dbl+lbl\u0026gt;, tel5 \u0026lt;dbl+lbl\u0026gt;, tel6 \u0026lt;dbl+lbl\u0026gt;, ## # tel7 \u0026lt;dbl+lbl\u0026gt;, tel8 \u0026lt;dbl+lbl\u0026gt;, p0a \u0026lt;dbl+lbl\u0026gt;, p0b \u0026lt;dbl+lbl\u0026gt;, p1 \u0026lt;dbl+lbl\u0026gt;, ## # p2 \u0026lt;dbl+lbl\u0026gt;, p3 \u0026lt;dbl+lbl\u0026gt;, p4 \u0026lt;dbl+lbl\u0026gt;, p5 \u0026lt;dbl+lbl\u0026gt;, p6 \u0026lt;dbl\u0026gt;, ## # p7 \u0026lt;dbl+lbl\u0026gt;, p8 \u0026lt;dbl\u0026gt;, id_persona_e \u0026lt;dbl+lbl\u0026gt;, pco1 \u0026lt;dbl+lbl\u0026gt;, ## # tot_per \u0026lt;dbl\u0026gt;, h5 \u0026lt;dbl\u0026gt;, ecivil \u0026lt;dbl+lbl\u0026gt;, h5_1 \u0026lt;chr\u0026gt;, h5_2 \u0026lt;dbl\u0026gt;, ## # nucleo \u0026lt;dbl\u0026gt;, pco2 \u0026lt;dbl+lbl\u0026gt;, numper \u0026lt;dbl\u0026gt;, n_ocupados \u0026lt;dbl\u0026gt;, ## # n_desocupados \u0026lt;dbl\u0026gt;, n_inactivos \u0026lt;dbl\u0026gt;, conyuge_jh \u0026lt;dbl+lbl\u0026gt;, numnuc \u0026lt;dbl\u0026gt;, ## # men18c \u0026lt;dbl+lbl\u0026gt;, may60c \u0026lt;dbl+lbl\u0026gt;, tipohogar \u0026lt;dbl+lbl\u0026gt;, e2 \u0026lt;dbl+lbl\u0026gt;, ## # e5b \u0026lt;dbl+lbl\u0026gt;, e6a \u0026lt;dbl+lbl\u0026gt;, e6b \u0026lt;dbl+lbl\u0026gt;, asiste2 \u0026lt;dbl+lbl\u0026gt;, esc \u0026lt;dbl\u0026gt;, ## # esc2 \u0026lt;dbl\u0026gt;, educ \u0026lt;dbl+lbl\u0026gt;, o1 \u0026lt;dbl+lbl\u0026gt;, o2 \u0026lt;dbl+lbl\u0026gt;, o3 \u0026lt;dbl+lbl\u0026gt;, ## # o3b \u0026lt;dbl+lbl\u0026gt;, o4 \u0026lt;dbl+lbl\u0026gt;, o6 \u0026lt;dbl+lbl\u0026gt;, o7 \u0026lt;dbl+lbl\u0026gt;, o7_esp \u0026lt;chr\u0026gt;, ## # o9a \u0026lt;chr\u0026gt;, o9b \u0026lt;chr\u0026gt;, oficio4_08 \u0026lt;dbl+lbl\u0026gt;, oficio1_08 \u0026lt;dbl+lbl\u0026gt;, ## # oficio4_88 \u0026lt;dbl+lbl\u0026gt;, oficio1_88 \u0026lt;dbl+lbl\u0026gt;, o15 \u0026lt;dbl+lbl\u0026gt;, o16 \u0026lt;dbl+lbl\u0026gt;, ## # o17 \u0026lt;dbl+lbl\u0026gt;, o24 \u0026lt;chr\u0026gt;, rama4 \u0026lt;dbl+lbl\u0026gt;, rama1 \u0026lt;dbl+lbl\u0026gt;, ## # rama4_rev3 \u0026lt;dbl+lbl\u0026gt;, rama1_rev3 \u0026lt;dbl+lbl\u0026gt;, o29 \u0026lt;dbl+lbl\u0026gt;, o30 \u0026lt;dbl+lbl\u0026gt;, ## # o31 \u0026lt;dbl+lbl\u0026gt;, o32 \u0026lt;dbl+lbl\u0026gt;, o32_esp \u0026lt;chr\u0026gt;, o32b \u0026lt;dbl+lbl\u0026gt;, ## # o33a \u0026lt;dbl+lbl\u0026gt;, o33b \u0026lt;dbl+lbl\u0026gt;, o34 \u0026lt;dbl+lbl\u0026gt;, o35 \u0026lt;dbl+lbl\u0026gt;, ## # o36 \u0026lt;dbl+lbl\u0026gt;, activ \u0026lt;dbl+lbl\u0026gt;, activ2 \u0026lt;dbl+lbl\u0026gt;, ocup_inf \u0026lt;dbl+lbl\u0026gt;, ## # y1_preg \u0026lt;dbl+lbl\u0026gt;, y1 \u0026lt;dbl\u0026gt;, ... select() con patrones de texto Podemos seleccionar variables considerando los prefijos, sufijos o partes de cómo están nombradas las variables. Independiente de qué tipo de patrón estes buscando, como todo texto y expresión regular en R (y gran parte de los carácteres) este texto debe venir entre comillas. Algunas de las funciones que posibilitan este proceso son:\n starts_with(): prefijo ends_with() : sufijo contains() : contiene una cadena de texto literal matches() : coincide con una expresión regular  select(datos, starts_with(\u0026#34;a\u0026#34;), ends_with(\u0026#34;preg\u0026#34;)) ## # A tibble: 185,437 x 63 ## area asiste2 activ activ2 y1_preg y2a_preg y2b_preg y3a_preg y3b_preg ## \u0026lt;dbl+l\u0026gt; \u0026lt;dbl+l\u0026gt; \u0026lt;dbl+lb\u0026gt; \u0026lt;dbl+lb\u0026gt; \u0026lt;dbl+l\u0026gt; \u0026lt;dbl+lb\u0026gt; \u0026lt;dbl+lb\u0026gt; \u0026lt;dbl+lb\u0026gt; \u0026lt;dbl+lb\u0026gt; ## 1 1 [Urb~ 2 [No ~ 1 [Ocu~ 1 [Ocu~ NA NA NA NA NA ## 2 1 [Urb~ 1 [Asi~ NA NA NA NA NA NA NA ## 3 1 [Urb~ 1 [Asi~ NA NA NA NA NA NA NA ## 4 1 [Urb~ 2 [No ~ 1 [Ocu~ 1 [Ocu~ 1 [Sí] 1 [Día~ 1 [Hor~ 1 [Sí] 1 [Sí] ## 5 1 [Urb~ 2 [No ~ 1 [Ocu~ 1 [Ocu~ NA NA NA NA NA ## 6 1 [Urb~ 2 [No ~ 1 [Ocu~ 1 [Ocu~ 1 [Sí] 1 [Día~ 1 [Hor~ 2 [No] 2 [No] ## 7 1 [Urb~ 1 [Asi~ 3 [Ina~ 4 [Ina~ NA NA NA NA NA ## 8 1 [Urb~ 2 [No ~ 3 [Ina~ 4 [Ina~ NA NA NA NA NA ## 9 1 [Urb~ 2 [No ~ 3 [Ina~ 4 [Ina~ NA NA NA NA NA ## 10 1 [Urb~ 2 [No ~ 3 [Ina~ 4 [Ina~ NA NA NA NA NA ## # ... with 185,427 more rows, and 54 more variables: y3c_preg \u0026lt;dbl+lbl\u0026gt;, ## # y3d_preg \u0026lt;dbl+lbl\u0026gt;, y3e_preg \u0026lt;dbl+lbl\u0026gt;, y3f_preg \u0026lt;dbl+lbl\u0026gt;, ## # y4a_preg \u0026lt;dbl+lbl\u0026gt;, y4b_preg \u0026lt;dbl+lbl\u0026gt;, y4c_preg \u0026lt;dbl+lbl\u0026gt;, ## # y4d_preg \u0026lt;dbl+lbl\u0026gt;, y5a_preg \u0026lt;dbl+lbl\u0026gt;, y5b_preg \u0026lt;dbl+lbl\u0026gt;, ## # y5c_preg \u0026lt;dbl+lbl\u0026gt;, y5d_preg \u0026lt;dbl+lbl\u0026gt;, y5e_preg \u0026lt;dbl+lbl\u0026gt;, ## # y5f_preg \u0026lt;dbl+lbl\u0026gt;, y5g_preg \u0026lt;dbl+lbl\u0026gt;, y5h_preg \u0026lt;dbl+lbl\u0026gt;, ## # y5i_preg \u0026lt;dbl+lbl\u0026gt;, y5j_preg \u0026lt;dbl+lbl\u0026gt;, y5k_preg \u0026lt;dbl+lbl\u0026gt;, ## # y5l_preg \u0026lt;dbl+lbl\u0026gt;, y6_preg \u0026lt;dbl+lbl\u0026gt;, y7_preg \u0026lt;dbl+lbl\u0026gt;, ## # y8_preg \u0026lt;dbl+lbl\u0026gt;, y9_preg \u0026lt;dbl+lbl\u0026gt;, y10_preg \u0026lt;dbl+lbl\u0026gt;, ## # y11_preg \u0026lt;dbl+lbl\u0026gt;, y12a_preg \u0026lt;dbl+lbl\u0026gt;, y12b_preg \u0026lt;dbl+lbl\u0026gt;, ## # y13a_preg \u0026lt;dbl+lbl\u0026gt;, y13b_preg \u0026lt;dbl+lbl\u0026gt;, y13c_preg \u0026lt;dbl+lbl\u0026gt;, ## # y14a_preg \u0026lt;dbl+lbl\u0026gt;, y14b_preg \u0026lt;dbl+lbl\u0026gt;, y14c_preg \u0026lt;dbl+lbl\u0026gt;, ## # y15a_preg \u0026lt;dbl+lbl\u0026gt;, y15b_preg \u0026lt;dbl+lbl\u0026gt;, y15c_preg \u0026lt;dbl+lbl\u0026gt;, ## # y16a_preg \u0026lt;dbl+lbl\u0026gt;, y16b_preg \u0026lt;dbl+lbl\u0026gt;, y17_preg \u0026lt;dbl+lbl\u0026gt;, ## # y18a_preg \u0026lt;dbl+lbl\u0026gt;, y18b_preg \u0026lt;dbl+lbl\u0026gt;, y18c_preg \u0026lt;dbl+lbl\u0026gt;, ## # y18d_preg \u0026lt;dbl+lbl\u0026gt;, y22_preg \u0026lt;dbl+lbl\u0026gt;, y23a_preg \u0026lt;dbl+lbl\u0026gt;, ## # y24_preg \u0026lt;dbl+lbl\u0026gt;, y25a_preg \u0026lt;dbl+lbl\u0026gt;, y25g_preg \u0026lt;dbl+lbl\u0026gt;, ## # y26a_preg \u0026lt;dbl+lbl\u0026gt;, y26b_preg \u0026lt;dbl+lbl\u0026gt;, y26d_preg \u0026lt;dbl+lbl\u0026gt;, ## # y27_preg \u0026lt;dbl+lbl\u0026gt;, v19_preg \u0026lt;dbl+lbl\u0026gt; # También se pueden combinar con operadores logicos select(datos, starts_with(\u0026#34;y1\u0026#34;)\u0026amp;ends_with(\u0026#34;preg\u0026#34;)) ## # A tibble: 185,437 x 21 ## y1_preg y10_preg y11_preg y12a_preg y12b_preg y13a_preg y13b_preg y13c_preg ## \u0026lt;dbl+lb\u0026gt; \u0026lt;dbl+lb\u0026gt; \u0026lt;dbl+lbl\u0026gt; \u0026lt;dbl+lbl\u0026gt; \u0026lt;dbl+lbl\u0026gt; \u0026lt;dbl+lbl\u0026gt; \u0026lt;dbl+lbl\u0026gt; \u0026lt;dbl+lbl\u0026gt; ## 1 NA NA NA 2 [No] 2 [No] 2 [No] 2 [No] 1 [Sí] ## 2 NA NA NA NA NA 2 [No] 1 [Sí] 2 [No] ## 3 NA NA NA NA NA 2 [No] 2 [No] 1 [Sí] ## 4 1 [Sí] NA NA 2 [No] 2 [No] 2 [No] 2 [No] 2 [No] ## 5 NA NA NA 2 [No] 2 [No] 2 [No] 2 [No] 1 [Sí] ## 6 1 [Sí] NA NA 2 [No] 2 [No] 2 [No] 2 [No] 2 [No] ## 7 NA NA 2 [No r~ 2 [No] 2 [No] 2 [No] 2 [No] 2 [No] ## 8 NA NA 2 [No r~ 2 [No] 2 [No] 2 [No] 2 [No] 2 [No] ## 9 NA NA 2 [No r~ 2 [No] 2 [No] 2 [No] 2 [No] 2 [No] ## 10 NA NA 2 [No r~ 2 [No] 2 [No] 2 [No] 2 [No] 2 [No] ## # ... with 185,427 more rows, and 13 more variables: y14a_preg \u0026lt;dbl+lbl\u0026gt;, ## # y14b_preg \u0026lt;dbl+lbl\u0026gt;, y14c_preg \u0026lt;dbl+lbl\u0026gt;, y15a_preg \u0026lt;dbl+lbl\u0026gt;, ## # y15b_preg \u0026lt;dbl+lbl\u0026gt;, y15c_preg \u0026lt;dbl+lbl\u0026gt;, y16a_preg \u0026lt;dbl+lbl\u0026gt;, ## # y16b_preg \u0026lt;dbl+lbl\u0026gt;, y17_preg \u0026lt;dbl+lbl\u0026gt;, y18a_preg \u0026lt;dbl+lbl\u0026gt;, ## # y18b_preg \u0026lt;dbl+lbl\u0026gt;, y18c_preg \u0026lt;dbl+lbl\u0026gt;, y18d_preg \u0026lt;dbl+lbl\u0026gt; select(datos, contains(\u0026#34;pobre\u0026#34;)|contains(\u0026#34;vivienda\u0026#34;)) ## # A tibble: 185,437 x 3 ## pobreza pobreza_sinte id_vivienda ## \u0026lt;dbl+lbl\u0026gt; \u0026lt;dbl+lbl\u0026gt; \u0026lt;dbl\u0026gt; ## 1 3 [No pobres] 3 [No pobres sin transferencia Covid ] 1101100101 ## 2 3 [No pobres] 3 [No pobres sin transferencia Covid ] 1101100101 ## 3 3 [No pobres] 3 [No pobres sin transferencia Covid ] 1101100102 ## 4 3 [No pobres] 3 [No pobres sin transferencia Covid ] 1101100102 ## 5 3 [No pobres] 3 [No pobres sin transferencia Covid ] 1101100102 ## 6 3 [No pobres] 3 [No pobres sin transferencia Covid ] 1101100103 ## 7 3 [No pobres] 3 [No pobres sin transferencia Covid ] 1101100103 ## 8 3 [No pobres] 3 [No pobres sin transferencia Covid ] 1101100103 ## 9 3 [No pobres] 3 [No pobres sin transferencia Covid ] 1101100104 ## 10 3 [No pobres] 3 [No pobres sin transferencia Covid ] 1101100104 ## # ... with 185,427 more rows select(datos, matches(\u0026#34;pobreza_|vivienda\u0026#34;)) ## # A tibble: 185,437 x 2 ## id_vivienda pobreza_sinte ## \u0026lt;dbl\u0026gt; \u0026lt;dbl+lbl\u0026gt; ## 1 1101100101 3 [No pobres sin transferencia Covid ] ## 2 1101100101 3 [No pobres sin transferencia Covid ] ## 3 1101100102 3 [No pobres sin transferencia Covid ] ## 4 1101100102 3 [No pobres sin transferencia Covid ] ## 5 1101100102 3 [No pobres sin transferencia Covid ] ## 6 1101100103 3 [No pobres sin transferencia Covid ] ## 7 1101100103 3 [No pobres sin transferencia Covid ] ## 8 1101100103 3 [No pobres sin transferencia Covid ] ## 9 1101100104 3 [No pobres sin transferencia Covid ] ## 10 1101100104 3 [No pobres sin transferencia Covid ] ## # ... with 185,427 more rows select() y condiciones lógicas Si combinamos select() con where() obtendremos algo así como una frase \u0026ldquo;seleciona donde\u0026rdquo;, ese donde responde a una condición que cumple cierta variable. Por ejemplo, queremos seleccionar todas las variables que son carácteres (is.character):\nselect(datos, where(is.character)) ## # A tibble: 185,437 x 19 ## h5_1 o7_esp o9a o9b o24 o32_esp y3f_esp y4d_esp y18d_esp y27_esp ## \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; ## 1 0 \u0026#34;\u0026#34; \u0026#34;VENDE~ \u0026#34;VEND~ \u0026#34;VENDE~ \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; ## 2 5 \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; ## 3 32 \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; ## 4 0 \u0026#34;\u0026#34; \u0026#34;GASTR~ \u0026#34;BARM~ \u0026#34;HOTEL~ \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; ## 5 32 \u0026#34;\u0026#34; \u0026#34;ARTES~ \u0026#34;QUEQ~ \u0026#34;HACE ~ \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; ## 6 0 \u0026#34;\u0026#34; \u0026#34;DGAC\u0026#34; \u0026#34;CONT~ \u0026#34;AEROP~ \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; ## 7 116|1~ \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; ## 8 0 \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; ## 9 0 \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; ## 10 0 \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; \u0026#34;\u0026#34; ## # ... with 185,427 more rows, and 9 more variables: y28_1j_esp \u0026lt;chr\u0026gt;, ## # s18_esp \u0026lt;chr\u0026gt;, s28_esp \u0026lt;chr\u0026gt;, s30_esp \u0026lt;chr\u0026gt;, r1b_comuna_esp \u0026lt;chr\u0026gt;, ## # r1b_pais_esp \u0026lt;chr\u0026gt;, r2_comuna_esp \u0026lt;chr\u0026gt;, r2_pais_esp \u0026lt;chr\u0026gt;, v20_esp \u0026lt;chr\u0026gt; Luego de la revisión del libro de códigos y la exploración de datos mediante a funciones como find_var() de sjmisc decidimos trabajar con las siguientes variables.\n edad sexo s13: previsión de salud tot_per: número de personas en el hogar ytoth: ingresos totales del hogar o1: ocupación y26d_total: Monto del IFE y26d_hog: ¿Alguien recibió el IFE?  ¡Apliquémos conocimientos!\nselect(datos, edad, sexo, prev =592, ocupacion = o1, tot_per, ytoth, starts_with(\u0026#34;y26d_\u0026#34;)\u0026amp;matches(\u0026#34;total|hog\u0026#34;)) ## # A tibble: 185,437 x 8 ## edad sexo prev ocupacion tot_per ytoth y26d_hog y26d_total ## \u0026lt;dbl\u0026gt; \u0026lt;dbl+lbl\u0026gt; \u0026lt;dbl+lbl\u0026gt; \u0026lt;dbl+lbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl+lb\u0026gt; \u0026lt;dbl+lbl\u0026gt; ## 1 34 2 [Mujer] 3 [ISAPRE] 2 [No] 2 3.91e5 1 [Sí] NA ## 2 4 2 [Mujer] 3 [ISAPRE] NA 2 3.91e5 1 [Sí] NA ## 3 5 2 [Mujer] 4 [Ninguno (par~ NA 3 9.48e5 2 [No] NA ## 4 45 1 [Hombr~ 1 [Sistema Públ~ 1 [Sí] 3 9.48e5 2 [No] NA ## 5 19 2 [Mujer] 4 [Ninguno (par~ 2 [No] 3 9.48e5 2 [No] NA ## 6 57 1 [Hombr~ 5 [Otro sistema] 1 [Sí] 3 3.00e6 2 [No] NA ## 7 20 1 [Hombr~ 5 [Otro sistema] 2 [No] 3 3.00e6 2 [No] NA ## 8 56 2 [Mujer] 5 [Otro sistema] 2 [No] 3 3.00e6 2 [No] NA ## 9 77 1 [Hombr~ 1 [Sistema Públ~ 2 [No] 2 6.10e5 2 [No] NA ## 10 60 2 [Mujer] 1 [Sistema Públ~ 2 [No] 2 6.10e5 2 [No] NA ## # ... with 185,427 more rows Es una buena práctica trabajar solo con las columnas que utilizaremos para el análisis, principalmente pues disminuye el uso de memoria\ndatos_proc \u0026lt;- select(datos, edad, sexo, prev = 592, ocupacion = o1, tot_per, ytoth, starts_with(\u0026#34;y26d_\u0026#34;)\u0026amp;matches(\u0026#34;total|hog\u0026#34;)) El nuevo objeto posee650 variables (columnas), pero conserva las filas 185.437 (u observaciones) ¿Qué pasa si quiero trabajar con un subset de casos? La respuesta es filter()\n5.2 filter() para manipular observaciones La función filter() de dplyr escoge o extrae filas basados en sus valores, subdivide un data frame (subset), reteniendo todas las filas que satisfacen sus condiciones.\nCon filter() será esencial el uso de los operadores que ya vimos, dado que las observaciones que preservarán en nuestros datos (y aquellas que no), están definidas por condiciones lógicas (relacionales o booleanas)\nfilter(datos, condicion_para filtrar) Esta condición para filtrar podría ser, por ejemplo variable1 \u0026gt;= 3\r\rfilter con números Imaginémos que queremos una base con las personas mayores de 15 años. Pero también que pertenezcan a hogares con menos de 7 personas.\nfilter(datos_proc, edad \u0026gt;= 15) ## # A tibble: 151,315 x 8 ## edad sexo prev ocupacion tot_per ytoth y26d_hog y26d_total ## \u0026lt;dbl\u0026gt; \u0026lt;dbl+lbl\u0026gt; \u0026lt;dbl+lbl\u0026gt; \u0026lt;dbl+lbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl+lb\u0026gt; \u0026lt;dbl+lbl\u0026gt; ## 1 34 2 [Mujer] 3 [ISAPRE] 2 [No] 2 3.91e5 1 [Sí] NA ## 2 45 1 [Hombr~ 1 [Sistema Públ~ 1 [Sí] 3 9.48e5 2 [No] NA ## 3 19 2 [Mujer] 4 [Ninguno (par~ 2 [No] 3 9.48e5 2 [No] NA ## 4 57 1 [Hombr~ 5 [Otro sistema] 1 [Sí] 3 3.00e6 2 [No] NA ## 5 20 1 [Hombr~ 5 [Otro sistema] 2 [No] 3 3.00e6 2 [No] NA ## 6 56 2 [Mujer] 5 [Otro sistema] 2 [No] 3 3.00e6 2 [No] NA ## 7 77 1 [Hombr~ 1 [Sistema Públ~ 2 [No] 2 6.10e5 2 [No] NA ## 8 60 2 [Mujer] 1 [Sistema Públ~ 2 [No] 2 6.10e5 2 [No] NA ## 9 54 2 [Mujer] 1 [Sistema Públ~ 1 [Sí] 4 1.32e6 1 [Sí] NA ## 10 18 1 [Hombr~ 4 [Ninguno (par~ 2 [No] 4 1.32e6 1 [Sí] NA ## # ... with 151,305 more rows filter(datos_proc, edad \u0026gt;= 15 \u0026amp; tot_per \u0026lt;7) ## # A tibble: 144,418 x 8 ## edad sexo prev ocupacion tot_per ytoth y26d_hog y26d_total ## \u0026lt;dbl\u0026gt; \u0026lt;dbl+lbl\u0026gt; \u0026lt;dbl+lbl\u0026gt; \u0026lt;dbl+lbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl+lb\u0026gt; \u0026lt;dbl+lbl\u0026gt; ## 1 34 2 [Mujer] 3 [ISAPRE] 2 [No] 2 3.91e5 1 [Sí] NA ## 2 45 1 [Hombr~ 1 [Sistema Públ~ 1 [Sí] 3 9.48e5 2 [No] NA ## 3 19 2 [Mujer] 4 [Ninguno (par~ 2 [No] 3 9.48e5 2 [No] NA ## 4 57 1 [Hombr~ 5 [Otro sistema] 1 [Sí] 3 3.00e6 2 [No] NA ## 5 20 1 [Hombr~ 5 [Otro sistema] 2 [No] 3 3.00e6 2 [No] NA ## 6 56 2 [Mujer] 5 [Otro sistema] 2 [No] 3 3.00e6 2 [No] NA ## 7 77 1 [Hombr~ 1 [Sistema Públ~ 2 [No] 2 6.10e5 2 [No] NA ## 8 60 2 [Mujer] 1 [Sistema Públ~ 2 [No] 2 6.10e5 2 [No] NA ## 9 54 2 [Mujer] 1 [Sistema Públ~ 1 [Sí] 4 1.32e6 1 [Sí] NA ## 10 18 1 [Hombr~ 4 [Ninguno (par~ 2 [No] 4 1.32e6 1 [Sí] NA ## # ... with 144,408 more rows ¿Y si quiero filtrar para saber el valor máximo de ingresos (ytoth)?\nfilter(datos_proc, ytoth == max(ytoth)) ## # A tibble: 1 x 8 ## edad sexo prev ocupacion tot_per ytoth y26d_hog y26d_total ## \u0026lt;dbl\u0026gt; \u0026lt;dbl+lbl\u0026gt; \u0026lt;dbl+lbl\u0026gt; \u0026lt;dbl+lbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl+lb\u0026gt; \u0026lt;dbl+lbl\u0026gt; ## 1 41 1 [Hombr~ 1 [Sistema Públ~ 1 [Sí] 1 2.25e8 2 [No] NA ¡Gana $225.200.000, es Hombre y tiene 41 años! (y vive solo\u0026hellip;)\nfilter() con carácteres Si queremos filtrar por la variable sexo solo a las mujeres, tengo dos opciones: o solo selecciono a las mujeres (==) o excluyo a los hombres (!=).\nAhora bien, antes hay que hacer una precisión importante: en los datos sexo es una variable que está como dbl y lbl (número etiquetado), por lo que no es que en la base aparezcan \u0026ldquo;Mujeres\u0026rdquo; y \u0026ldquo;Hombres\u0026rdquo;, sino que 2 y 1.\nPor ello, con el siguiente código aparecerá un error en sus consolas.\nfilter(datos_proc, sexo == \u0026#34;Mujer\u0026#34;) Una función muy muy útil (sobre todo cuando trabajemos con regresiones) es as_factor() que permite conservar los niveles pero definiendo sus categorías de respuesta en base a la etiqueta que traen (el lbl)\ndatos_proc$sexo \u0026lt;- as_factor(datos_proc$sexo) ¡Ahora si funcionará!\nfilter(datos_proc, sexo == \u0026#34;Mujer\u0026#34;) ## # A tibble: 99,341 x 8 ## edad sexo prev ocupacion tot_per ytoth y26d_hog y26d_total ## \u0026lt;dbl\u0026gt; \u0026lt;fct\u0026gt; \u0026lt;dbl+lbl\u0026gt; \u0026lt;dbl+lbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl+lb\u0026gt; \u0026lt;dbl+lbl\u0026gt; ## 1 34 Mujer 3 [ISAPRE] 2 [No] 2 390833 1 [Sí] NA ## 2 4 Mujer 3 [ISAPRE] NA 2 390833 1 [Sí] NA ## 3 5 Mujer 4 [Ninguno (partic~ NA 3 947583 2 [No] NA ## 4 19 Mujer 4 [Ninguno (partic~ 2 [No] 3 947583 2 [No] NA ## 5 56 Mujer 5 [Otro sistema] 2 [No] 3 3004167 2 [No] NA ## 6 60 Mujer 1 [Sistema Público~ 2 [No] 2 610250 2 [No] NA ## 7 54 Mujer 1 [Sistema Público~ 1 [Sí] 4 1321481 1 [Sí] NA ## 8 31 Mujer 1 [Sistema Público~ 1 [Sí] 4 1110000 2 [No] NA ## 9 9 Mujer 1 [Sistema Público~ NA 4 1110000 2 [No] NA ## 10 77 Mujer 1 [Sistema Público~ 2 [No] 1 739833 2 [No] NA ## # ... with 99,331 more rows filter(datos_proc, sexo != \u0026#34;Hombre\u0026#34;) ## # A tibble: 99,341 x 8 ## edad sexo prev ocupacion tot_per ytoth y26d_hog y26d_total ## \u0026lt;dbl\u0026gt; \u0026lt;fct\u0026gt; \u0026lt;dbl+lbl\u0026gt; \u0026lt;dbl+lbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl+lb\u0026gt; \u0026lt;dbl+lbl\u0026gt; ## 1 34 Mujer 3 [ISAPRE] 2 [No] 2 390833 1 [Sí] NA ## 2 4 Mujer 3 [ISAPRE] NA 2 390833 1 [Sí] NA ## 3 5 Mujer 4 [Ninguno (partic~ NA 3 947583 2 [No] NA ## 4 19 Mujer 4 [Ninguno (partic~ 2 [No] 3 947583 2 [No] NA ## 5 56 Mujer 5 [Otro sistema] 2 [No] 3 3004167 2 [No] NA ## 6 60 Mujer 1 [Sistema Público~ 2 [No] 2 610250 2 [No] NA ## 7 54 Mujer 1 [Sistema Público~ 1 [Sí] 4 1321481 1 [Sí] NA ## 8 31 Mujer 1 [Sistema Público~ 1 [Sí] 4 1110000 2 [No] NA ## 9 9 Mujer 1 [Sistema Público~ NA 4 1110000 2 [No] NA ## 10 77 Mujer 1 [Sistema Público~ 2 [No] 1 739833 2 [No] NA ## # ... with 99,331 more rows Ojo. R es sensible a cómo está escrito el texto. Si pones el mismo código pero sin respetar mayúsuculas y minúsculas el código no funcionará\r\r¡Por último! ¿Cómo se seleccionan dos condiciones en carácter? Con el operador %in%\ndatos_proc$prev \u0026lt;- as_factor(datos_proc$prev) filter(datos_proc, prev %in% c(\u0026#34;Sistema Público FONASA\u0026#34;, \u0026#34;ISAPRE\u0026#34;)) ## # A tibble: 169,503 x 8 ## edad sexo prev ocupacion tot_per ytoth y26d_hog y26d_total ## \u0026lt;dbl\u0026gt; \u0026lt;fct\u0026gt; \u0026lt;fct\u0026gt; \u0026lt;dbl+lbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl+lb\u0026gt; \u0026lt;dbl+lbl\u0026gt; ## 1 34 Mujer ISAPRE 2 [No] 2 390833 1 [Sí] NA ## 2 4 Mujer ISAPRE NA 2 390833 1 [Sí] NA ## 3 45 Hombre Sistema Público F~ 1 [Sí] 3 947583 2 [No] NA ## 4 77 Hombre Sistema Público F~ 2 [No] 2 610250 2 [No] NA ## 5 60 Mujer Sistema Público F~ 2 [No] 2 610250 2 [No] NA ## 6 11 Hombre Sistema Público F~ NA 4 1321481 1 [Sí] NA ## 7 54 Mujer Sistema Público F~ 1 [Sí] 4 1321481 1 [Sí] NA ## 8 57 Hombre Sistema Público F~ 1 [Sí] 4 1321481 1 [Sí] NA ## 9 55 Hombre Sistema Público F~ 1 [Sí] 4 1110000 2 [No] NA ## 10 31 Mujer Sistema Público F~ 1 [Sí] 4 1110000 2 [No] NA ## # ... with 169,493 more rows Antes de definir que observaciones vamos a conservar en una base procesada datos_proc ¡Creemos transformemos variables con mutate()!\n5.3 mutate() para transformación de variables La función de mutate() permite hacer operaciones para crear nuevas variables o transformar las ya existentes.\nmutate(datos, nueva_variable = cálculo o condición)\r\rmutate() en base a cálculo Calcularemos una nueva variable llamada nueva_variable que proviene de la suma de 2+3. También una variable ingreso_percapita que proviene de la división del ingreso total del hogar y el número de personas que residen en el hogar\nmutate(datos_proc, nueva_variable = 3+2) ## # A tibble: 185,437 x 9 ## edad sexo prev ocupacion tot_per ytoth y26d_hog y26d_total nueva_variable ## \u0026lt;dbl\u0026gt; \u0026lt;fct\u0026gt; \u0026lt;fct\u0026gt; \u0026lt;dbl+lbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl+lb\u0026gt; \u0026lt;dbl+lbl\u0026gt; \u0026lt;dbl\u0026gt; ## 1 34 Mujer ISAP~ 2 [No] 2 3.91e5 1 [Sí] NA 5 ## 2 4 Mujer ISAP~ NA 2 3.91e5 1 [Sí] NA 5 ## 3 5 Mujer Ning~ NA 3 9.48e5 2 [No] NA 5 ## 4 45 Homb~ Sist~ 1 [Sí] 3 9.48e5 2 [No] NA 5 ## 5 19 Mujer Ning~ 2 [No] 3 9.48e5 2 [No] NA 5 ## 6 57 Homb~ Otro~ 1 [Sí] 3 3.00e6 2 [No] NA 5 ## 7 20 Homb~ Otro~ 2 [No] 3 3.00e6 2 [No] NA 5 ## 8 56 Mujer Otro~ 2 [No] 3 3.00e6 2 [No] NA 5 ## 9 77 Homb~ Sist~ 2 [No] 2 6.10e5 2 [No] NA 5 ## 10 60 Mujer Sist~ 2 [No] 2 6.10e5 2 [No] NA 5 ## # ... with 185,427 more rows mutate(datos_proc, nueva_variable = 3+2, ingreso_percapita = ytoth/tot_per) ## # A tibble: 185,437 x 10 ## edad sexo prev ocupacion tot_per ytoth y26d_hog y26d_total nueva_variable ## \u0026lt;dbl\u0026gt; \u0026lt;fct\u0026gt; \u0026lt;fct\u0026gt; \u0026lt;dbl+lbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl+lb\u0026gt; \u0026lt;dbl+lbl\u0026gt; \u0026lt;dbl\u0026gt; ## 1 34 Mujer ISAP~ 2 [No] 2 3.91e5 1 [Sí] NA 5 ## 2 4 Mujer ISAP~ NA 2 3.91e5 1 [Sí] NA 5 ## 3 5 Mujer Ning~ NA 3 9.48e5 2 [No] NA 5 ## 4 45 Homb~ Sist~ 1 [Sí] 3 9.48e5 2 [No] NA 5 ## 5 19 Mujer Ning~ 2 [No] 3 9.48e5 2 [No] NA 5 ## 6 57 Homb~ Otro~ 1 [Sí] 3 3.00e6 2 [No] NA 5 ## 7 20 Homb~ Otro~ 2 [No] 3 3.00e6 2 [No] NA 5 ## 8 56 Mujer Otro~ 2 [No] 3 3.00e6 2 [No] NA 5 ## 9 77 Homb~ Sist~ 2 [No] 2 6.10e5 2 [No] NA 5 ## 10 60 Mujer Sist~ 2 [No] 2 6.10e5 2 [No] NA 5 ## # ... with 185,427 more rows, and 1 more variable: ingreso_percapita \u0026lt;dbl\u0026gt; ¿Qué pasa si queremos, luego de calcular nuestras nuevas variables, filtrar un ingreso per cápita menor o igual a $1.000.000\n¡Ahora entra en escena nuestro operador estrella %\u0026gt;%!\ndatos %\u0026gt;% mutate(., nueva_variable = calculo ) %\u0026gt;% filter(., nueva_variable \u0026lt;= valor)\r\rBásicamente, el %\u0026gt;% permite \u0026ldquo;ingresar\u0026rdquo; nuestra base de datos como argumento para cada función e ir operándola en proceso\ndatos_proc %\u0026gt;% mutate(ingreso_percapita = ytoth/tot_per) %\u0026gt;% filter(ingreso_percapita \u0026lt;= 1000000) ## # A tibble: 176,094 x 9 ## edad sexo prev ocupacion tot_per ytoth y26d_hog y26d_total ## \u0026lt;dbl\u0026gt; \u0026lt;fct\u0026gt; \u0026lt;fct\u0026gt; \u0026lt;dbl+lbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl+lb\u0026gt; \u0026lt;dbl+lbl\u0026gt; ## 1 34 Mujer ISAPRE 2 [No] 2 390833 1 [Sí] NA ## 2 4 Mujer ISAPRE NA 2 390833 1 [Sí] NA ## 3 5 Mujer Ninguno (particul~ NA 3 947583 2 [No] NA ## 4 45 Hombre Sistema Público F~ 1 [Sí] 3 947583 2 [No] NA ## 5 19 Mujer Ninguno (particul~ 2 [No] 3 947583 2 [No] NA ## 6 77 Hombre Sistema Público F~ 2 [No] 2 610250 2 [No] NA ## 7 60 Mujer Sistema Público F~ 2 [No] 2 610250 2 [No] NA ## 8 11 Hombre Sistema Público F~ NA 4 1321481 1 [Sí] NA ## 9 54 Mujer Sistema Público F~ 1 [Sí] 4 1321481 1 [Sí] NA ## 10 18 Hombre Ninguno (particul~ 2 [No] 4 1321481 1 [Sí] NA ## # ... with 176,084 more rows, and 1 more variable: ingreso_percapita \u0026lt;dbl\u0026gt; recode() La función denominada recode puede reemplazar valores numéricos en base a su posición o su nombre, y valores de carácteres o factores sólo por su nombre.\nEn el siguiente ejemplo recodificamos las categorías de respuesta de Mujer a Femenino y de Hombre a Masculino\ndatos_proc %\u0026gt;% mutate(sexo = dplyr::recode(sexo, \u0026#34;Mujer\u0026#34; = \u0026#34;Femenino\u0026#34;, \u0026#34;Hombre\u0026#34; = \u0026#34;Masculino\u0026#34;)) ## # A tibble: 185,437 x 8 ## edad sexo prev ocupacion tot_per ytoth y26d_hog y26d_total ## \u0026lt;dbl\u0026gt; \u0026lt;fct\u0026gt; \u0026lt;fct\u0026gt; \u0026lt;dbl+lbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl+lb\u0026gt; \u0026lt;dbl+lbl\u0026gt; ## 1 34 Femenino ISAPRE 2 [No] 2 3.91e5 1 [Sí] NA ## 2 4 Femenino ISAPRE NA 2 3.91e5 1 [Sí] NA ## 3 5 Femenino Ninguno (particu~ NA 3 9.48e5 2 [No] NA ## 4 45 Masculi~ Sistema Público ~ 1 [Sí] 3 9.48e5 2 [No] NA ## 5 19 Femenino Ninguno (particu~ 2 [No] 3 9.48e5 2 [No] NA ## 6 57 Masculi~ Otro sistema 1 [Sí] 3 3.00e6 2 [No] NA ## 7 20 Masculi~ Otro sistema 2 [No] 3 3.00e6 2 [No] NA ## 8 56 Femenino Otro sistema 2 [No] 3 3.00e6 2 [No] NA ## 9 77 Masculi~ Sistema Público ~ 2 [No] 2 6.10e5 2 [No] NA ## 10 60 Femenino Sistema Público ~ 2 [No] 2 6.10e5 2 [No] NA ## # ... with 185,427 more rows El problema de recode() que se utiliza dentro de dplyr es que si recodifico se pierde la etiqueta anterior. Esto es un problema a si por ejemplo, solo quiero recodificar casos perdidos.\nFrente a ello, con el tiempo nos hemos convencido de que la mejor solución hasta ahora es ocupar recode() del paquete car. Si recuerdan, dos funciones con el mismo nombre podrían producir conflictos, y por ello, especificaremos con car::recode() que la función recode() que ocupamos proviene de car\ndatos %$% car::recode(.$variable, c(\u0026lsquo;valor_orig1=nuevo_valor1;valor_org2=nuevo_valor2\u0026rsquo;))\nOjo: %$% es el primo hermano de %\u0026gt;% (básicamente funcionan igual, pero este es necesario para car)\n\rdatos_proc %$% car::recode(.$y26d_hog, c(\u0026#39;9=NA\u0026#39;)) %\u0026gt;% head(.) ## \u0026lt;labelled\u0026lt;double\u0026gt;[6]\u0026gt;: y26d_hog. Últimos 12 meses, ¿alguien recibió Ingreso Familiar de Emergencia? ## [1] 1 1 2 2 2 2 ## ## Labels: ## value label ## 1 Sí ## 2 No ## 9 No sabe Aquí una versión de si la recodificación es hacia carácteres (mismo ejemplo que con recode() de dplyr)\ndatos_proc %$% car::recode(.$sexo, c(\u0026#39;\u0026#34;Mujer\u0026#34;=\u0026#34;Femenino\u0026#34;;\u0026#34;Hombre\u0026#34;= \u0026#34;Masculino\u0026#34;\u0026#39;), as.factor = T) %\u0026gt;% head(.) ## [1] Femenino Femenino Femenino Masculino Femenino Masculino ## Levels: Femenino Masculino 5.3.2 if_else() para construir variables condicionales La función if_else() permite construir variables en base a condiciones lógicas. Su estructura es la siguiente\nif_else(condición,TRUE,FALSE) Donde dice TRUE es el valor que se obtiene si la condición es verdadera, mientras que FALSE es todo el resto de las opciones (o cuando es FALSA)\r\rCrearemos una variable que dummy que indica si el respondente es FONASA o no lo es.\ndatos_proc %\u0026gt;% mutate(fonasa = if_else(prev == \u0026#34;Sistema Público FONASA\u0026#34;, 1, 0)) También podemos ocupar esta función como validador, por ejemplo, rellenando con valores lógicos como FALSE cuando no hay valores en ytoth. Luego esos FALSE podrían ser contados en otros procesos estadísticos\ndatos_proc %\u0026gt;% mutate(validador_ingreso = if_else(is.na(ytoth), FALSE, TRUE)) ## # A tibble: 185,437 x 9 ## edad sexo prev ocupacion tot_per ytoth y26d_hog y26d_total ## \u0026lt;dbl\u0026gt; \u0026lt;fct\u0026gt; \u0026lt;fct\u0026gt; \u0026lt;dbl+lbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl+lb\u0026gt; \u0026lt;dbl+lbl\u0026gt; ## 1 34 Mujer ISAPRE 2 [No] 2 390833 1 [Sí] NA ## 2 4 Mujer ISAPRE NA 2 390833 1 [Sí] NA ## 3 5 Mujer Ninguno (particul~ NA 3 947583 2 [No] NA ## 4 45 Hombre Sistema Público F~ 1 [Sí] 3 947583 2 [No] NA ## 5 19 Mujer Ninguno (particul~ 2 [No] 3 947583 2 [No] NA ## 6 57 Hombre Otro sistema 1 [Sí] 3 3004167 2 [No] NA ## 7 20 Hombre Otro sistema 2 [No] 3 3004167 2 [No] NA ## 8 56 Mujer Otro sistema 2 [No] 3 3004167 2 [No] NA ## 9 77 Hombre Sistema Público F~ 2 [No] 2 610250 2 [No] NA ## 10 60 Mujer Sistema Público F~ 2 [No] 2 610250 2 [No] NA ## # ... with 185,427 more rows, and 1 more variable: validador_ingreso \u0026lt;lgl\u0026gt; 5.3.2 case_when() para construir variable en base a múltiples condiciones Una función que se utiliza frecuentemente para colapsar categorías o construir categorías en base a varias condiciones es case_when() por lo lógico y fácil que es de entender\ncase_when(variable == condicion ~ valor1, variable == condicion ~ valor2, TRUE ~ NA_real)\n Donde, TRUE indica \u0026ldquo;todo el resto\u0026rdquo;, y el NA dependerá de la clase del valor de recodificación  \rUn ejemplo claro es cuando queremos construir categorías de edad\ndatos_proc %\u0026gt;% mutate(edad_tramo = case_when(edad \u0026lt;=39 ~ \u0026#34;Joven\u0026#34;, edad \u0026gt; 39 \u0026amp; edad \u0026lt;=59 ~ \u0026#34;Adulto\u0026#34;, edad \u0026gt; 59 ~ \u0026#34;Adulto mayor\u0026#34;, TRUE ~ NA_character_)) %\u0026gt;% select(edad, edad_tramo) ## # A tibble: 185,437 x 2 ## edad edad_tramo ## \u0026lt;dbl\u0026gt; \u0026lt;chr\u0026gt; ## 1 34 Joven ## 2 4 Joven ## 3 5 Joven ## 4 45 Adulto ## 5 19 Joven ## 6 57 Adulto ## 7 20 Joven ## 8 56 Adulto ## 9 77 Adulto mayor ## 10 60 Adulto mayor ## # ... with 185,427 more rows Como se puede ver, no solamente indicamos tramos de la variable edad, sino que utilizamos operadores lógicos (\u0026amp;). Podríamos ocupar el que necesitemos, y sobre todo, también combinar variables (por ejemplo, crear una variable sexo-edad)\n6. Resumen con procesamiento de las variables Hasta ahora, solo hemos creado una base de datos que selecciona variables. Ahora nos resta incorporar en un nuevo objeto los cambios que nos parezcan relevantes para la base de datos procesada que utilizaremos en nuestros análisis.\nComo ya conocemos operadores que permiten concatenar procesos ( %\u0026gt;% y %$%) este procedimiento será mucho más fácil.\ndatos_proc %\u0026gt;% filter(edad \u0026gt;= 15 \u0026amp; tot_per \u0026lt;7) %\u0026gt;% mutate(ingreso_percapita = ytoth/tot_per, edad_tramo = case_when(edad \u0026lt;=39 ~ \u0026#34;Joven\u0026#34;, edad \u0026gt; 39 \u0026amp; edad \u0026lt;=59 ~ \u0026#34;Adulto\u0026#34;, edad \u0026gt; 59 ~ \u0026#34;Adulto mayor\u0026#34;, TRUE ~ NA_character_), fonasa = if_else(prev == \u0026#34;Sistema Público FONASA\u0026#34;, 1, 0), ocupacion = as_factor(ocupacion)) %\u0026gt;% select(sexo, edad_tramo, ocupacion, ingreso_percapita, ife = y26d_hog) ## # A tibble: 144,418 x 5 ## sexo edad_tramo ocupacion ingreso_percapita ife ## \u0026lt;fct\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;fct\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl+lbl\u0026gt; ## 1 Mujer Joven No 195416. 1 [Sí] ## 2 Hombre Adulto Sí 315861 2 [No] ## 3 Mujer Joven No 315861 2 [No] ## 4 Hombre Adulto Sí 1001389 2 [No] ## 5 Hombre Joven No 1001389 2 [No] ## 6 Mujer Adulto No 1001389 2 [No] ## 7 Hombre Adulto mayor No 305125 2 [No] ## 8 Mujer Adulto mayor No 305125 2 [No] ## 9 Mujer Adulto Sí 330370. 1 [Sí] ## 10 Hombre Joven No 330370. 1 [Sí] ## # ... with 144,408 more rows ¡Ahora que estamos seguras/os sobre-escribimos la base!\ndatos_proc \u0026lt;- datos_proc %\u0026gt;% filter(edad \u0026gt;= 15 \u0026amp; tot_per \u0026lt;7) %\u0026gt;% mutate(ingreso_percapita = ytoth/tot_per, edad_tramo = case_when(edad \u0026lt;=39 ~ \u0026#34;Joven\u0026#34;, edad \u0026gt; 39 \u0026amp; edad \u0026lt;=59 ~ \u0026#34;Adulto\u0026#34;, edad \u0026gt; 59 ~ \u0026#34;Adulto mayor\u0026#34;, TRUE ~ NA_character_), fonasa = if_else(prev == \u0026#34;Sistema Público FONASA\u0026#34;, 1, 0), ocupacion = as_factor(ocupacion)) %\u0026gt;% select(sexo, edad_tramo, ocupacion, ingreso_percapita, ife = y26d_hog) Podemos visualizar la base resultante a partir de view_df() de sjPlot\nsjPlot::view_df(datos_proc) Data frame: datos_proc\r\rIDNameLabelValuesValue Labels\r\r\r1\rsexo\rSexo\r\rHombre\nMujer\r\r\r2\redad_tramo\r\r\r\u0026lt;output omitted\u0026gt;\r\r\r3\rocupacion\ro1. La semana pasada, Â¿trabajÃ³ al menos una hora?\r\rSÃ­\nNo\r\r\r4\ringreso_percapita\rIngreso total del hogar\rrange: 0.0-225200000.0\r\r\r5\rife\ry26d_hog. Ãšltimos 12 meses, Â¿alguien recibiÃ³\nIngreso Familiar de Emergencia?\r1\n2\n9\rSÃ­\nNo\nNo sabe\r\r\r7. Guardar base procesada Para guardar la base de datos procesada, debes dirigir la ruta hacia tu Rproject\nsaveRDS(datos_proc, file = \u0026#34;../nombre_project/output/datos_proc.rds\u0026#34;) 8. Reporte de progreso ¡Recuerda rellenar tu reporte de progreso. En tu correo electrónico está disponible el código mediante al cuál debes acceder para actualizar tu estado de avance del curso.\n  ¡Atención! Fíjate bien que == y = son distintos. En R == es indicar \u0026ldquo;igual a\u0026rdquo;, mientras que = es asignar (sinónimo de \u0026lt;-) \u0026#x21a9;\u0026#xfe0e;\n Este operador es muy utilizado, sirve para indicar que algo está dentro de una cadena de valores. \u0026#x21a9;\u0026#xfe0e;\n   ","date":1628812800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1628812800,"objectID":"1acd8542f65cf3cff8f2eec98b604361","permalink":"/example/02-practico/","publishdate":"2021-08-13T00:00:00Z","relpermalink":"/example/02-practico/","section":"example","summary":"0. Objetivo de la práctica El objetivo del práctico, es avanzar en el procesamiento de los datos a través de la transformación de las variables a utilizar. Para ello revisaremos procedimientos básicos para el manejo de datos con Rstudio.","tags":null,"title":"Transformar y seleccionar variables","type":"docs"},{"authors":null,"categories":null,"content":"This assignment will give you practice generating synthetic data and building in causal effects.\nThese two examples will be incredibly helpful:\n Generating random numbers The ultimate guide to generating synthetic data for causal inference  You\u0026rsquo;ll be doing all your R work in R Markdown. You can download a zipped file of a pre-made project here:\n  problem-set-9.zip  And as always, if you\u0026rsquo;re struggling, please talk to me. Work with classmates too (especially for this assignment!). Don\u0026rsquo;t suffer in silence!\nInstructions   If you\u0026rsquo;re using R on your own computer, download this file, unzip it, and double click on the file named problem-set-9.Rproj:  problem-set-9.zip\nYou\u0026rsquo;ll need to make sure you have these packages installed on your computer: tidyverse, broom, ggdag, and scales. If you try to load one of those packages with library(tidyverse) or library(ggdag), etc., and R gives an error that the package is missing, use the \u0026ldquo;Packages\u0026rdquo; panel in RStudio to install it.\n(Alternatively, you can open the project named \u0026ldquo;Problem Set 9\u0026rdquo; on RStudio.cloud and complete the assignment in your browser without needing to install anything. This link should take you to the project—if it doesn\u0026rsquo;t, log in and look for the project named \u0026ldquo;Problem Set 9.\u0026quot;)\n  Rename the R Markdown file named your-name_problem-set-9.Rmd to something that matches your name and open it in RStudio.\n  Complete the tasks given in the R Markdown file. You can remove any of the question text if you want.\nYou can definitely copy, paste, and adapt from other code in the document or the example guide—don\u0026rsquo;t try to write everything from scratch!.\nYou\u0026rsquo;ll need to insert your own code chunks. Rather than typing them by hand (that\u0026rsquo;s tedious!), use the \u0026ldquo;Insert\u0026rdquo; button at the top of the editing window, or press ⌥ + ⌘ + I on macOS, or ctrl + alt + I on Windows.\nRemember that you can run an entire chunk by clicking on the green play arrow in the top right corner of the chunk. You can also run lines of code line-by-line if you place your cursor on some R code and press ⌘ + enter (for macOS users) or ctrl + enter (for Windows users).\nMake sure you run each chunk sequentially. If you run a chunk in the middle of the document without running previous ones, it might not work, since previous chunks might do things that later chunks depend on.\n  When you\u0026rsquo;re all done, click on the \u0026ldquo;Knit\u0026rdquo; button at the top of the editing window and create an HTML or Word version (or PDF if you\u0026rsquo;ve installed tinytex) of your document. Upload that file to iCollege.\n  ","date":1618790400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1618790400,"objectID":"6e2fa3adc24a54ff7a509ba8feddc0c2","permalink":"/assignment/09-problem-set/","publishdate":"2021-04-19T00:00:00Z","relpermalink":"/assignment/09-problem-set/","section":"assignment","summary":"This assignment will give you practice generating synthetic data and building in causal effects.\nThese two examples will be incredibly helpful:\n Generating random numbers The ultimate guide to generating synthetic data for causal inference  You\u0026rsquo;ll be doing all your R work in R Markdown.","tags":null,"title":"Problem set 9","type":"docs"},{"authors":null,"categories":null,"content":"For this problem set, you\u0026rsquo;ll practice doing regression discontinuity analysis with simulated data from a hypothetical program. This example page will be incredibly useful for you:\n Regression discontinuity  You\u0026rsquo;ll be doing all your R work in R Markdown. You can download a zipped file of a pre-made project here:\n  problem-set-6.zip  And as always, if you\u0026rsquo;re struggling, please talk to me. Work with classmates too (especially for this assignment!). Don\u0026rsquo;t suffer in silence!\nInstructions   If you\u0026rsquo;re using R on your own computer, download this file, unzip it, and double click on the file named problem-set-6.Rproj:  problem-set-6.zip\nYou\u0026rsquo;ll need to make sure you have these packages installed on your computer: tidyverse, broom, rdrobust, rddensity, and modelsummary. If you try to load one of those packages with library(tidyverse) or library(rdrobust), etc., and R gives an error that the package is missing, use the \u0026ldquo;Packages\u0026rdquo; panel in RStudio to install it.\n(Alternatively, you can open the project named \u0026ldquo;Problem Set 6\u0026rdquo; on RStudio.cloud and complete the assignment in your browser without needing to install anything. This link should take you to the project—if it doesn\u0026rsquo;t, log in and look for the project named \u0026ldquo;Problem Set 6.\u0026quot;)\n  Rename the R Markdown file named your-name_problem-set-6.Rmd to something that matches your name and open it in RStudio.\n  Complete the tasks given in the R Markdown file. There are questions marked in bold. Your job is to answer those questions. You don\u0026rsquo;t need to put your answers in bold or ALL CAPS or anything, and you can remove the question text if you want.\nFill out code in the empty chunks provided (you can definitely copy, paste, and adapt from other code in the document or the example page on regression discontinuity—don\u0026rsquo;t try to write everything from scratch!).\nYou\u0026rsquo;ll need to insert your own code chunks. Rather than typing them by hand (that\u0026rsquo;s tedious!), use the \u0026ldquo;Insert\u0026rdquo; button at the top of the editing window, or press ⌥ + ⌘ + I on macOS, or ctrl + alt + I on Windows.\nRemember that you can run an entire chunk by clicking on the green play arrow in the top right corner of the chunk. You can also run lines of code line-by-line if you place your cursor on some R code and press ⌘ + enter (for macOS users) or ctrl + enter (for Windows users).\nMake sure you run each chunk sequentially. If you run a chunk in the middle of the document without running previous ones, it might not work, since previous chunks might do things that later chunks depend on.\n  When you\u0026rsquo;re all done, click on the \u0026ldquo;Knit\u0026rdquo; button at the top of the editing window and create an HTML or Word version (or PDF if you\u0026rsquo;ve installed tinytex) of your document. Upload that file to iCollege.\n  ","date":1616976000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1616976000,"objectID":"e5e6f92df01daa4f8a074400ebb41bb3","permalink":"/assignment/06-problem-set/","publishdate":"2021-03-29T00:00:00Z","relpermalink":"/assignment/06-problem-set/","section":"assignment","summary":"For this problem set, you\u0026rsquo;ll practice doing regression discontinuity analysis with simulated data from a hypothetical program. This example page will be incredibly useful for you:\n Regression discontinuity  You\u0026rsquo;ll be doing all your R work in R Markdown.","tags":null,"title":"Problem set 6","type":"docs"},{"authors":null,"categories":null,"content":"\r\r\rContenidos (): Esta página contiene las presentaciones, sesiones grabadas y lecturas correspondientes al tema.\n\rPrácticos (): Esta página contiene los ejercicios prácticos asociados a cada sesión de clase. Podrás encontrar tanto el código de R cómo, en algunos casos, los videos grabados del live coding. Esta página será muy importante para la entrega de las tareas.\n\r\rPuedes suscribir la planificación del curso con la URL del calendario en Outlook, Google Calendar o Apple Calendar:\n \r\r\rAnálisis de Datos en R\rContenidos\rPrácticos\r\r\rUnidad 1. Elementos y herramientas básicos de R\r\r\r\r\r\rBloque 1\n(13 Agosto-17:30-18:45)\r1.1 R enviroment: interfaz de RStudio, elementos de script, workspace\n1.2 Prácticas y herramientas de consulta y comunicación: CRAN, stackoverflow, Rcommunity, Slack\n1.3 Librerías y funciones para las ciencias sociales: tidyverse y sj (sjmisc y sjPlot)\r\r\r\r\rUnidad 2. Manipulación y limpieza de datos\r\r\r\r\r\rBloque 2\n(13 Agosto-19:00-20:20)\r2.1 Importar/exportar datos en diferentes formatos\n2.2 Validación y limpieza de variables\r\r\r\rBloque 3\n(20 Agosto-17:30-18:45)\r2.3 Transformación y selección de variables\r\r\r\r\rUnidad 3. Análisis estadístico descriptivo en R\r\r\r\r\r\rBloque 4\n(20 Agosto-19:00-20:20)\r3.1 Análisis descriptivos univariados: medidas de tendencia central, dispersión y frecuencias\n3.2 Análisis bivariado: tablas de contingencia, correlaciones y ANOVA\r\r\r\r\rUnidad 4. Análisis estadístico inferencial en R\r\r\r\r\r\rBloque 5\n(27 Agosto-17:30-18:45)\r4.1 Muestras complejas y precisión de inferencia estadística\r\r\r\rBloque 6\n(27 Agosto-19:00-20:20)\r4.2 Regresiones lineales, predictores categóricos y representación gráfica\n4.3 Regresiones logísticas, exponenciación y representación gráfica\r\r\r\r3 septiembre\r Entrega de proyecto final (opcional)\r\r\r\r\r\r\r\rPuedes descargar el programa apretando el siguiente botón:\r\n","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"3e223d7ba58b0122b42458e4cf52e04c","permalink":"/schedule/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/schedule/","section":"","summary":"Contenidos (): Esta página contiene las presentaciones, sesiones grabadas y lecturas correspondientes al tema.\n\rPrácticos (): Esta página contiene los ejercicios prácticos asociados a cada sesión de clase.","tags":null,"title":"Calendario","type":"page"},{"authors":null,"categories":null,"content":"\r\r\rPresentación\r\rDescripción\rObjetivos\r\rObjetivo general\rObjetivos específicos\r\r\rI. Contenidos\r\rUnidad 1. Elementos y herramientas básicos de R\rUnidad 2. Manipulación y limpieza de datos\rUnidad 3. Análisis estadístico descriptivo en R\rUnidad 4. Análisis estadístico inferencial en R\r\rII. Metodología del curso\r\rRecursos principales de aprendizaje\r\rIII. Evaluación de aprendizajes\rIV. Calendario de actividades\rV. Recursos pedagógicos\r\r1. Referencias bibliográficas\r2. Sitios de consulta\r\rDescargar programa en pdf\r\r\rDocente\r Valentina Andrade\rvalentinaandrade.netlify.app/\r valentinaandrade@uchile.cl\r @valentiandrade\r Agendar reunión\r\r\rAyudantes\r Nicolas Godoy\r nicolas.godoy.m@ug.uchile.cl\r Agendar reunión\r Dafne Jaime\r dafne.jaime@ug.uchile.cl\r Agendar reunión\r\r\rDetalles de los talleres\r Clases: Viernes 17.30-20.20\r Agosto\r Online, en link de Zoom Slack\r\r\rContacto\rEl canal de contacto de preferencia es Slack, y en segunda instancia, email.\n\r\rPresentación\rR es uno de los lenguajes de programación estadística más populares y demandados del último tiempo. Una de las razones principales es que tanto el software como la comunidad que hace uso de este se maneja en un marco de la ciencia abierta (r Open Science Tools o rOpensci), permitiendo el desarrollo constante de una serie de herramientas que permiten mejorar nuestras investigaciones, de manera libre, gratis y colaborativa.\nPara las ciencias sociales estos elementos no son triviales. Es frecuente encontrarse con personas de nuestro campo que se están iniciando en R y desisten de este intento dada la frustración y pensamientos de incapacidad. Aprender R puede ser difícil al iniciar – es como aprender cualquier otro lenguaje o idioma -, y poco se ha pensado en cómo implementar enseñanza a grupos más expuestos a estos prejuicios, como en las ciencias sociales y humanidades.\nSe propone que un curso de introducción de R para análisis de datos sociales puede abordar estos desafíos basado en enseñar herramientas concretas que faciliten y potencien las investigaciones sociales. Basada en la experiencia de enseñanza de R en contextos similares, esto implica introducir prácticas del rOpensci como la colaboración y reproducibilidad, que facilitan sin duda el aprendizaje colectivo y la calidad de los productos desarrollados durante el curso.\n¡Iniciemos este desafío juntas/os!\nDescripción\rEste curso busca introducir a estudiante en el uso de R y RStudio para el análisis de datos sociales. En ese sentido, será una introducción al entorno R y a la interfaz de RStudio para su uso en contextos académicos. Al mismo tiempo, el curso profundiza en temas específicos para las ciencias sociales como el análisis estadístico y la presentación de resultados (visualización de datos).\n\rObjetivos\rObjetivo general\rAprender las principales herramientas para el análisis de datos sociales en RStudio, con el fin de lograr un uso autónomo del software\n\rObjetivos específicos\rEl curso no es un curso de programación en R , sino que una aplicación concreta del uso de R para ciencias sociales. Por ello, el curso tiene como propósito específico que los estudiantes sean capaces de\nManejar R y herramientas asociadas a su utilización (rOpensci), utilizando prácticas que les permitan avanzar en su aprendizaje de manera autónoma (Unidad 1)\n\rManipular, procesar y limpiar datos sociales utilizando R (Unidad 2)\n\rAplicar herramientas para análisis estadísticos descriptivos en R (Unidad 3)\n\rAplicar herramientas para análisis estadísticos inferenciales en R (Unidad 4)\n\rPresentar de resultados, a partir de la visualización de datos y construcción de documentos (transversal a todas las unidades)\n\r\r\r\r\rI. Contenidos\rUnidad 1. Elementos y herramientas básicos de R\r1.1 R enviroment: interfaz de RStudio, elementos de script, workspace\n1.2 Prácticas y herramientas de consulta: CRAN, stackoverflow, Rcommunity\n1.3 Herramientas para la colaboración y comunicación: Rprojects, GitHub y Slack\n1.4 Librerías y funciones para las ciencias sociales: tidyverse y sj (sjmisc y sjPlot)\n1.5 Construcción de reportes reproducibles e integrados con código: RMarkdown\n\rUnidad 2. Manipulación y limpieza de datos\r2.1 Importar y exportar datos en diferentes formatos\n2.2 Validación y limpieza de variables (missing values)\n2.3 Transformación y selección de variables\n2.4 Transformación de datos en tidydata con tidyr\n\rUnidad 3. Análisis estadístico descriptivo en R\r3.1 Análisis descriptivos univariados: medidas de tendencia central, dispersión y frecuencias\n3.2 Análisis descriptivo bivariado: tablas de contingencia, correlaciones y ANOVA\n3.3 Representación gráfica con sjPlot: Likert, proporciones agrupadas y distribuciones\n\rUnidad 4. Análisis estadístico inferencial en R\r4.1 Muestras complejas y precisión de inferencia estadística con survey y srvyr\n4.2 Pruebas de hipótesis y representación gráfica\n4.3 Regresiones lineales, predictores categóricos y representación gráfica\n4.4 Regresiones logísticas, exponenciación y representación gráfica\n4.5 Ajuste de modelos (performance) y otras representaciones gráficas (predicción, efectos marginales e interacciones)\n\r\rII. Metodología del curso\rDado el contexto de pandemia se tendrán tres espacios principales de aprendizaje:\nSesiones de clases lectivas (), donde se presentarán los aspectos centrales de los contenidos correspondientes a la semana vía Zoom. Tanto el documento de presentación como el video de la clase se encontrará disponible en la pestaña de Clases de este sitio web del curso.\n\rPrácticas guiadas (): cada tema de las sesiones se acompaña de una guía práctica de aplicación de contenidos, y que estarán disponibles en la pestaña Prácticos. Estas guías están diseñadas para ser desarrolladas de manera autónoma por cada estudiante semana a semana. También serán desarrolladas y revisadas cada semana en grupos pequeños con supervisión de ayudantes para dar mayor oportunidad de participación y resolver las dudas respectivas. Existe un reporte de progreso asociado a estas guías que deberá ser completado semanalmente con fines de monitoreo y retroalimentación.\n\rTareas: se desarrollarán 6 tareas que les permitirán aplicar contenidos y replicar lo aprendido en los prácticos en base a una base de datos seleccionada por ustedes al inicio de semestre. Esto permitirá no solo recibir retroalimentación constante, sino que aprender con datos que puedan ser útiles para otros proyectos de investigación que sean de su interés.\n\r\rRecursos principales de aprendizaje\r1. Sitio web\nEl curso tiene disponible este sitio web, que he programado pues permite integrar texto y código de R, junto con hacer interactuar con otras plataformas como el foro Disqus y Github.\n2. R, RStudio y RStudio Cloud \nEl software que se utilizará principalmente será R y su interfaz RStudio. Ahora bien, muchos usuario/as de R presentan problemas de instalación dada la capacidad de sus computadores y sistemas operativos. Por ello se promoverá el uso del servicio gratuito de RStudio.cloud , que permite ejecutar la interfaz de RStudio en el navegador web y compartir el código de manera sincrónica con la docente. Dado el enfoque rOpensci, las plantillas para ejemplos, ejercicios y mini proyectos podrán ser implementados en esta plataforma. Si bien no es ideal pues tiene limitantes de memoria, mientras ustedes asimilan el programa será una buena herramienta.\n3. Slack \nSlack es una herramienta de uso frecuente en equipos de trabajo que utilizan R pues permite integrar script (o código) de distintos lenguajes en el chat. Se tendrá un espacio de trabajo en la app Slack que permite que cualquier persona del curso pueda hacer preguntas y cualquiera pueda responder. Esta es una de las prácticas que se promoverán en el curso pues es probable que los estudiantes tengan dudas similares a las de sus compañeros, por lo que las respuestas de la docente, ayudante y otros compañeros serán de libre disposición de todo el curso. Dentro del Slack se tendrán canales para hacer preguntas sobre las sesiones, tareas y proyectos, y el link que permite unirse a este estará disponible en el sitio del curso.\n Guía de uso de slack\n Unirse a slack de curso\n4. GitHub \nGithub es una plataforma online que permite depositar archivos y el control de versiones (VCS), por lo que se ha transformado una herramienta fácil y popular para corregir, colaborar y compartir códigos de distintos lenguajes (no solo R). Utilizaremos esta plataforma para subir las tareas, ayudarlos/as de manera directa con su código y darles feedback.\n5. Zotero \nZotero es un gestor bibliográfico que permite sistematizar las referencias y archivos utilizados en una investigación o informe. Enseñaremos este de manera complementaria pues este software se puede integrar en los documentos escritos hechos en R.\n\r\rIII. Evaluación de aprendizajes\rLas evaluaciones del curso se componen de tareas (70% de la nota final) y la entrega de una investigación (30% de la nota final), en dónde en ambos casos la/el estudiante deberá seleccionar datos y temas de interés de modo de acercar la aplicación del software a contextos de investigación propios de la/el estudiante. En concreto, cada evaluación consiste en:\n1. Tareas (70% de la nota final): consisten en evaluaciones parciales temáticas que buscan poner en práctica los aprendizajes expuestos en la sesión de clases y herramientas reforzadas en los prácticos. El promedio de notas las de tareas será calculado solo con las cuatro mejores entregas a partir de la Tarea 1 (25% c/u)1.\n2. Investigación final (30% de la nota final): consiste en una evaluación final que aplica los conocimientos y herramientas entregadas a lo largo de curso, a un proyecto de investigación de elección por el/la estudiante.\n\rIV. Calendario de actividades\rEl calendario de actividades se puede revisar con detención en la pestaña planificación. Un resumen breve de las tareas es\n\r\rEvaluación\rFormato\rFecha\rPonderación Nota Final\r\r\r\rTarea\r4 tareas2\rHasta Viernes de la semana informada\r70% (25% c/u)\r\rInvestigación\rÚnica entrega\r22 de noviembre\r30%\r\r\r\r\rV. Recursos pedagógicos\r1. Referencias bibliográficas\r\rWickham, H., \u0026amp; Grolemund, G. (2016). R for data science: import, tidy, transform, visualize, and model data (First edition). Sebastopol: O’Reilly. Libro con enfoque en el aprendizaje de R. Disponible en español como “R para ciencia de datos”\n\rDaniel Lüdecke (2021) Data Visualization for Statistics in Social Science R package version 2.8.7\n\rWickham et al., (2019). Welcome to the tidyverse. Journal of Open Source Software, 4(43), 1686\n\rYihui Xie, J. J. Allaire, Garrett Grolemund (2021) R Markdown: The Definitive Guide\n\rBryan, Jenny (2019) Happy Git in R\n\r\r\r2. Sitios de consulta\r\rrOpensci (R Open Scicnce Tools)\rLaboratorio de Ciencia Social Abierta, Centro de Estudios de Conflicto y Cohesión Social (LISA-COES)\rStackoverflow\rRStudio Community\rRMarkdown\rsjPlot\rtidyverse\r\r\r\rDescargar programa en pdf\r\n\r\rEs decir, a lo largo del semestre deberá entregar 6 tareas: 5 calificadas (Tarea 1 a Tarea 5) y 1 no (Tarea 0). De las 5 tareas restantes, solo las 4 mejores serán consideradas en su promedio de las tareas.↩︎\n\rEs decir, a lo largo del semestre deberá entregar 6 tareas: 5 calificadas (Tarea 1 a Tarea 5) y 1 no (Tarea 0). De las 5 tareas restantes, solo las 4 mejores serán consideradas en su promedio de las tareas.↩︎\n\r\r\r","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"e4d5a4a79239f08c6ad0d7cbf1be756c","permalink":"/syllabus/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/syllabus/","section":"","summary":"Presentación\r\rDescripción\rObjetivos\r\rObjetivo general\rObjetivos específicos\r\r\rI. Contenidos\r\rUnidad 1. Elementos y herramientas básicos de R\rUnidad 2. Manipulación y limpieza de datos\rUnidad 3.","tags":null,"title":"Syllabus","type":"page"}]